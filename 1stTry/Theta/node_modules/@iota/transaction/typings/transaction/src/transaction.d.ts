import '../../typed-array';
export declare const SIGNATURE_OR_MESSAGE_OFFSET = 0;
export declare const SIGNATURE_OR_MESSAGE_LENGTH: number;
export declare const ADDRESS_OFFSET: number;
export declare const ADDRESS_LENGTH: number;
export declare const VALUE_OFFSET: number;
export declare const VALUE_LENGTH = 81;
export declare const OBSOLETE_TAG_OFFSET: number;
export declare const OBSOLETE_TAG_LENGTH = 81;
export declare const ISSUANCE_TIMESTAMP_OFFSET: number;
export declare const ISSUANCE_TIMESTAMP_LENGTH = 27;
export declare const CURRENT_INDEX_OFFSET: number;
export declare const CURRENT_INDEX_LENGTH = 27;
export declare const LAST_INDEX_OFFSET: number;
export declare const LAST_INDEX_LENGTH = 27;
export declare const BUNDLE_OFFSET: number;
export declare const BUNDLE_LENGTH: number;
export declare const TRUNK_TRANSACTION_OFFSET: number;
export declare const TRUNK_TRANSACTION_LENGTH: number;
export declare const BRANCH_TRANSACTION_OFFSET: number;
export declare const BRANCH_TRANSACTION_LENGTH: number;
export declare const TAG_OFFSET: number;
export declare const TAG_LENGTH = 81;
export declare const ATTACHMENT_TIMESTAMP_OFFSET: number;
export declare const ATTACHMENT_TIMESTAMP_LENGTH = 27;
export declare const ATTACHMENT_TIMESTAMP_LOWER_BOUND_OFFSET: number;
export declare const ATTACHMENT_TIMESTAMP_LOWER_BOUND_LENGTH = 27;
export declare const ATTACHMENT_TIMESTAMP_UPPER_BOUND_OFFSET: number;
export declare const ATTACHMENT_TIMESTAMP_UPPER_BOUND_LENGTH = 27;
export declare const TRANSACTION_NONCE_OFFSET: number;
export declare const TRANSACTION_NONCE_LENGTH = 81;
export declare const TRANSACTION_ESSENCE_OFFSET: number;
export declare const TRANSACTION_ESSENCE_LENGTH: number;
export declare const TRANSACTION_LENGTH: number;
export declare const TRANSACTION_HASH_LENGTH: number;
/**
 * Checks if given value is a valid transaction buffer length or offset.
 *
 * @method isMultipleOfTransactionLength
 *
 * @param {Int8Array} lengthOrOffset
 *
 * @return {bolean}
 */
export declare const isMultipleOfTransactionLength: (lengthOrOffset: number) => boolean;
/**
 * Creates a function that copies a fixed size part of the buffer.
 *
 * @method transactionBufferSlice
 *
 * @param {number} transactionFieldOffset
 * @param {number} transactionFieldLength
 *
 * @return {Function}
 *
 * @ignore
 */
export declare const transactionBufferSlice: (transactionFieldOffset: number, transactionFieldLength: number) => (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `signatureOrMessage` field.
 *
 * @method signatureOrMessage
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const signatureOrMessage: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `address` field.
 *
 * @method address
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const address: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `value` field.
 *
 * @method value
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const value: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
export declare const createObsoleteTag: (warn?: boolean) => (buffer: Int8Array, offset?: number) => Int8Array;
export declare const obsoleteTag: (buffer: Int8Array, offset?: number) => Int8Array;
/**
 * Returns a copy of `issuanceTimestamp` field.
 *
 * @method issuanceTimestamp
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const issuanceTimestamp: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
export declare const createCurrentIndex: (warn?: boolean) => (buffer: Int8Array, offset?: number) => Int8Array;
export declare const currentIndex: (buffer: Int8Array, offset?: number) => Int8Array;
export declare const createLastIndex: (warn?: boolean) => (buffer: Int8Array, offset?: number) => Int8Array;
export declare const lastIndex: (buffer: Int8Array, offset?: number) => Int8Array;
export declare const createBundle: (warn?: boolean) => (buffer: Int8Array, offset?: number) => Int8Array;
export declare const bundle: (buffer: Int8Array, offset?: number) => Int8Array;
/**
 * Returns a copy of `trunkTransaction` field.
 *
 * @method trunkTransaction
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const trunkTransaction: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `branchTransaction` field.
 *
 * @method branchTransaction
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const branchTransaction: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `tag` field.
 *
 * @method tag
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const tag: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `attachmentTimestamp` field.
 *
 * @method attachmentTimestamp
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const attachmentTimestamp: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `attachmentTimestampLowerBound` field.
 *
 * @method attachmentTimestampLowerBound
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const attachmentTimestampLowerBound: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `attachmentTimestampUpperBound` field.
 *
 * @method attachmentTimestampUpperBound
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const attachmentTimestampUpperBound: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of `tansactionNonce` field.
 *
 * @method transactionNonce
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const transactionNonce: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Returns a copy of transaction essence fields.
 *
 * @method bundle
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be a multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array}
 */
export declare const transactionEssence: (transactionBuffer: Int8Array, transactionOffset?: number) => Int8Array;
/**
 * Calculates the transaction hash.
 *
 * @method transactionHash
 *
 * @param {Int8Array} buffer - Transaction buffer. Buffer length must be multiple of transaction length.
 * @param {Number} [offset=0] - Transaction trit offset. It must be a multiple of transaction length.
 *
 * @return {Int8Array} Transaction hash
 */
export declare const transactionHash: (buffer: Int8Array, offset?: number) => Int8Array;
/**
 * Checks if input trits represent a syntactically valid transaction.
 *
 * @method isTransaction
 *
 * @param {Int8Array} transaction - Transaction trits.
 * @param {number} [minWeightMagnitude=0] - Min weight magnitude.
 *
 * @return {boolean}
 */
export declare const isTransaction: (transaction: any, minWeightMagnitude?: number) => boolean;
/**
 * Checks if given transaction is tail.
 * A tail transaction is the one with `currentIndex=0`.
 *
 * @method isTailTransaction
 *
 * @param {Int8Array} transaction
 *
 * @return {boolean}
 */
export declare const isTail: (transaction: any) => transaction is Int8Array;
/**
 * Checks if given transaction is head.
 * The head transaction is the one with `currentIndex=lastIndex`.
 *
 * @method isHeadTransaction
 *
 * @param {Int8Array} transaction
 *
 * @return {boolean}
 */
export declare const isHead: (transaction: any) => transaction is Int8Array;
/**
 * Checks if given transaction has been attached.
 *
 * @method isAttachedTransaction
 *
 * @param {Int8Array} transaction
 *
 * @return {boolean}
 */
export declare const isAttached: (transaction: Int8Array) => boolean;
