"use strict";
exports.__esModule = true;
var converter_1 = require("@iota/converter");
var transaction_1 = require("@iota/transaction");
var Promise = require("bluebird");
var errors = require("../../errors");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
/**
 * @method createStoreTransactions
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider
 *
 * @return {function} {@link #module_core.storeTransactions `storeTransactions`}
 */
exports.createStoreTransactions = function (_a) {
    var send = _a.send;
    /**
     * @description Persists a list of _attached_ transaction trytes in the store of connected node by calling
     * [`storeTransactions`](https://docs.iota.org/iri/api#endpoints/storeTransactions) command.
     * Tip selection and Proof-of-Work must be done first, by calling
     * [`getTransactionsToApprove`]{@link #module_core.getTransactionsToApprove} and
     * [`attachToTangle`]{@link #module_core.attachToTangle} or an equivalent attach method or remote
     * [`PoWbox`](https://powbox.devnet.iota.org/).
     *
     * **Note:** Persist the transaction trytes in local storage __before__ calling this command, to ensure
     * that reattachment is possible, until your bundle has been included.
     *
     * Any transactions stored with this command will eventaully be erased, as a result of a snapshot.
     *
     * @method storeTransactions
     *
     * @memberof module:core
     *
     * @param {Trytes[]} trytes - Attached transaction trytes
     * @param {Callback} [callback] - Optional callback
     *
     * @return {Promise}
     * @fullfil {Trytes[]} Attached transaction trytes
     * @reject {Error}
     * - `INVALID_ATTACHED_TRYTES`: Invalid attached trytes
     * - Fetch error
     */
    return function (trytes, callback) {
        return Promise.resolve(guards_1.validate([
            trytes,
            function (arr) {
                return arr.every(function (t) {
                    return guards_1.isTrytesOfExactLength(t, transaction_1.TRANSACTION_LENGTH / converter_1.TRYTE_WIDTH) && transaction_1.isAttached(converter_1.trytesToTrits(t));
                });
            },
            errors.INVALID_ATTACHED_TRYTES,
        ]))
            .then(function () {
            return send({
                command: types_1.IRICommand.STORE_TRANSACTIONS,
                trytes: trytes
            });
        })
            .then(function () { return trytes; })
            .asCallback(callback);
    };
};
//# sourceMappingURL=createStoreTransactions.js.map