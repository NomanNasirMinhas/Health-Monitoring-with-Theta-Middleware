"use strict";
exports.__esModule = true;
var transaction_converter_1 = require("@iota/transaction-converter");
var _1 = require("./");
/**
 * @method createBroadcastBundle
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider
 *
 * @return {function} {@link #module_core.broadcastBundle `broadcastBundle`}
 */
exports.createBroadcastBundle = function (provider) {
    var broadcastTransactions = _1.createBroadcastTransactions(provider);
    var getBundle = _1.createGetBundle(provider);
    /**
     * Re-broadcasts all transactions in a bundle given the tail transaction hash.
     * It might be useful when transactions did not properly propagate,
     * particularly in the case of large bundles.
     *
     * @example
     *
     * ```js
     * broadcastBundle(tailHash)
     *   .then(transactions => {
     *      // ...
     *   })
     *   .catch(err => {
     *     // ...
     *   })
     * ```
     *
     * @method broadcastBundle
     *
     * @memberof module:core
     *
     * @param {Hash} tailTransactionHash - Tail transaction hash
     * @param {Callback} [callback] - Optional callback
     *
     * @return {Promise}
     * @fulfil {Transaction[]} List of transaction objects
     * @reject {Error}
     * - `INVALID_HASH`: Invalid tail transaction hash
     * - `INVALID_BUNDLE`: Invalid bundle
     * - Fetch error
     */
    return function broadcastBundle(tailTransactionHash, callback) {
        return getBundle(tailTransactionHash)
            .then(transaction_converter_1.asFinalTransactionTrytes)
            .then(broadcastTransactions)
            .asCallback(callback);
    };
};
//# sourceMappingURL=createBroadcastBundle.js.map