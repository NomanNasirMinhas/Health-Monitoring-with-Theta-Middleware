"use strict";
exports.__esModule = true;
/** @module unit-converter */
var bignumber_js_1 = require("bignumber.js");
var Unit;
(function (Unit) {
    Unit["i"] = "i";
    Unit["Ki"] = "Ki";
    Unit["Mi"] = "Mi";
    Unit["Gi"] = "Gi";
    Unit["Ti"] = "Ti";
    Unit["Pi"] = "Pi";
})(Unit = exports.Unit || (exports.Unit = {}));
// Map of IOTA Units based off of the standard System of Units
exports.unitMap = {
    i: { val: new bignumber_js_1["default"](10).pow(0), dp: 0 },
    Ki: { val: new bignumber_js_1["default"](10).pow(3), dp: 3 },
    Mi: { val: new bignumber_js_1["default"](10).pow(6), dp: 6 },
    Gi: { val: new bignumber_js_1["default"](10).pow(9), dp: 9 },
    Ti: { val: new bignumber_js_1["default"](10).pow(12), dp: 12 },
    Pi: { val: new bignumber_js_1["default"](10).pow(15), dp: 15 }
};
/**
 * Converts accross IOTA units. Valid unit names are:
 * `i`, `Ki`, `Mi`, `Gi`, `Ti`, `Pi`
 *
 * @method convertUnits
 *
 * @param {string | int | float} value
 *
 * @param {string} fromUnit - Name of original value unit
 *
 * @param {string} toUnit - Name of unit wich we convert to
 *
 * @return {Number}
 */
exports.convertUnits = function (value, fromUnit, toUnit) {
    // Check if wrong unit provided
    if (!exports.unitMap[fromUnit] || !exports.unitMap[toUnit]) {
        throw new Error('Invalid unit provided.');
    }
    var valueBn = new bignumber_js_1["default"](value);
    if (valueBn.dp() > exports.unitMap[fromUnit].dp) {
        throw new Error('Input value exceeded max fromUnit precision.');
    }
    return valueBn
        .times(exports.unitMap[fromUnit].val)
        .dividedBy(exports.unitMap[toUnit].val)
        .toNumber();
};
//# sourceMappingURL=index.js.map