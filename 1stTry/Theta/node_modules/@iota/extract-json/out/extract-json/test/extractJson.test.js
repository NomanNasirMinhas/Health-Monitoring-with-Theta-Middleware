"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var samples_1 = require("@iota/samples");
var ava_1 = require("ava");
var src_1 = require("../src");
ava_1["default"]('extractJson() parses JSON object.', function (t) {
    t.is(src_1.extractJson(samples_1.bundleWithJSON), samples_1.parsedJSON, 'extractJson() should return parsed object for bundle with valid tryte encoded JSON.');
});
ava_1["default"]('extractJson() parses JSON object over multiple signature message fragments.', function (t) {
    t.is(src_1.extractJson(samples_1.bundleWithMultipleJSONMessageFragments), samples_1.parsedJSONOfMultipleMessageFragments, 'extractJson() should return parsed object for bundle with valid tryte encoded JSON in multiple message fragments.');
});
ava_1["default"]('extractJson() parses empty JSON object.', function (t) {
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON), '{}', 'extractJson() should return empty object for bundle with empty tryte encoded JSON.');
});
ava_1["default"]('extraJson() parses boolean values.', function (t) {
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON.map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'UCPC9DGDTC' + '9'.repeat(81 * 27 - 10) })); })), 'false', 'extractJson() should parse "false" boolean values.');
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON.map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'HDFDIDTC' + '9'.repeat(81 * 27 - 8) })); })), 'true', 'extractJson() should parse "true" boolean values.');
});
ava_1["default"]('extraJson() parses string values.', function (t) {
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON.map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'GAWCTC9D9DCDFAGA' + '9'.repeat(81 * 27 - 16) })); })), JSON.stringify('hello!'), 'extractJson() should parse string values.');
});
ava_1["default"]('extraJson() parses JSON arrays.', function (t) {
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON.map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'JCVAQAWAQAGAHDWCFDTCTCFAGALC' + '9'.repeat(81 * 27 - 28) })); })), JSON.stringify([1, 2, 'three!']), 'extractJson() should parse arrays.');
});
ava_1["default"]('extraJson() parses null.', function (t) {
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON.map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'BDID9D9D' + '9'.repeat(81 * 27 - 8) })); })), JSON.stringify(null), 'extractJson() should parse null.');
});
ava_1["default"]('extractJson() parses numbers', function (t) {
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON
        .map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'XA' + '9'.repeat(81 * 27 - 2) })); })
        .slice(0, 1)), 3, 'extractJson() should parse integers');
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON
        .map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'RAXA' + '9'.repeat(81 * 27 - 2) })); })
        .slice(0, 1)), -3, 'extractJson() should parse negative integers');
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON
        .map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'XASAVAYA' + '9'.repeat(81 * 27 - 8) })); })
        .slice(0, 1)), 3.14, 'extractJson() should parse positive floats');
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON
        .map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'PAXASAVAYA' + '9'.repeat(81 * 27 - 10) })); })
        .slice(0, 1)), 3.14, 'extractJson() should parse positive floats (with sign)');
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON
        .map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'RAXASAVAYA' + '9'.repeat(81 * 27 - 10) })); })
        .slice(0, 1)), -3.14, 'extractJson() should parse negative floats');
    t.is(src_1.extractJson(samples_1.bundleWithEmptyJSON
        .map(function (tx) { return (__assign({}, tx, { signatureMessageFragment: 'VASAWAXATCPAZA' + '9'.repeat(81 * 27 - 14) })); })
        .slice(0, 1)), 123000, 'extractJson() should parse exponential');
});
ava_1["default"]('extractJson() throws error for invalid bundle.', function (t) {
    t.is(t.throws(function () { return src_1.extractJson([]); }, Error).message, src_1.errors.INVALID_BUNDLE, 'extractJson() should throw correct error for invalid bundle.');
});
ava_1["default"]('extractJson() throws error for invalid bundle.', function (t) {
    t.is(t.throws(function () { return src_1.extractJson([]); }, Error).message, src_1.errors.INVALID_BUNDLE, 'extractJson() should throw correct error for invalid bundle.');
});
ava_1["default"]('extractJson() throws error for invalid JSON.', function (t) {
    t.is(t.throws(function () { return src_1.extractJson(samples_1.bundleWithInvalidJSON); }, Error).message, src_1.errors.INVALID_JSON, 'extractJson() should throw correct error for invalid JSON.');
});
//# sourceMappingURL=extractJson.test.js.map