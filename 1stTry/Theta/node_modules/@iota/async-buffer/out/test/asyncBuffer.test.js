"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var BluebirdPromise = require("bluebird");
var riteway_1 = require("riteway");
var asyncBuffer_1 = require("../src/asyncBuffer");
riteway_1.describe('asyncBuffer(length?: number)', function (assert) { return __awaiter(_this, void 0, void 0, function () {
    var letter, delay, _a, _b, _c, _d, numberOfActions, _e, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                letter = 'hi';
                delay = function (t) { return new BluebirdPromise(function (resolve) { return setTimeout(resolve, t); }); };
                _a = assert;
                _b = {
                    given: 'a past letter',
                    should: 'read it'
                };
                return [4 /*yield*/, (function () {
                        var buffer = asyncBuffer_1.asyncBuffer();
                        buffer.write(letter);
                        return buffer.read();
                    })()];
            case 1:
                _a.apply(void 0, [(_b.actual = _g.sent(),
                        _b.expected = letter,
                        _b)]);
                _c = assert;
                _d = {
                    given: 'a future letter',
                    should: 'read it'
                };
                return [4 /*yield*/, (function () {
                        var buffer = asyncBuffer_1.asyncBuffer();
                        var future = buffer.read();
                        delay(100).then(function () { return buffer.write(letter); });
                        return future;
                    })()];
            case 2:
                _c.apply(void 0, [(_d.actual = _g.sent(),
                        _d.expected = letter,
                        _d)]);
                numberOfActions = 10000;
                _e = assert;
                _f = {
                    given: '',
                    should: 'read/write atomically'
                };
                return [4 /*yield*/, (function () {
                        var buffer = asyncBuffer_1.asyncBuffer();
                        var delayLowerBound = 1;
                        var delayUpperBound = 10;
                        var g = function (j) { return ++j; };
                        var f = function () {
                            return buffer
                                .read()
                                .then(g)
                                .tap(buffer.write);
                        };
                        buffer.write(-1);
                        return BluebirdPromise.all(new Array(numberOfActions)
                            .fill(undefined)
                            .map(function () { return delay(Math.floor(Math.random() * delayUpperBound) + delayLowerBound).then(f); })).then(function (results) { return results.sort(function (a, b) { return a - b; }); });
                    })()];
            case 3:
                _e.apply(void 0, [(_f.actual = _g.sent(),
                        _f.expected = new Array(numberOfActions).fill(0).map(function (_, i) { return i; }),
                        _f)]);
                assert({
                    given: 'length < 0',
                    should: 'throw RangeError',
                    actual: riteway_1.Try(asyncBuffer_1.asyncBuffer, -1),
                    expected: new RangeError('Illegal buffer length.')
                });
                assert({
                    given: 'length = -Infinity',
                    should: 'throw RangeError',
                    actual: riteway_1.Try(asyncBuffer_1.asyncBuffer, -Infinity),
                    expected: new RangeError('Illegal buffer length.')
                });
                assert({
                    given: 'length = 0',
                    should: 'throw RangeError',
                    actual: riteway_1.Try(asyncBuffer_1.asyncBuffer, 0),
                    expected: new RangeError('Illegal buffer length.')
                });
                assert({
                    given: 'length = -0.5',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(asyncBuffer_1.asyncBuffer, -0.5),
                    expected: new TypeError('Illegal buffer length.')
                });
                assert({
                    given: 'length = 0.5',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(asyncBuffer_1.asyncBuffer, 0.5),
                    expected: new TypeError('Illegal buffer length.')
                });
                assert({
                    given: 'length = NaN',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(asyncBuffer_1.asyncBuffer, NaN),
                    expected: new TypeError('Illegal buffer length.')
                });
                assert({
                    given: 'length = null',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(asyncBuffer_1.asyncBuffer, null),
                    expected: new TypeError('Illegal buffer length.')
                });
                assert({
                    given: 'length = "1"',
                    should: 'throw TypeError',
                    actual: riteway_1.Try(asyncBuffer_1.asyncBuffer, '1'),
                    expected: new TypeError('Illegal buffer length.')
                });
                assert({
                    given: 'length = 2',
                    should: 'throw Error once inbound queue length is exceeded',
                    actual: (function () {
                        var length = 2;
                        var buffer = asyncBuffer_1.asyncBuffer(length);
                        for (var i = 0; i < length; i++) {
                            buffer.write('');
                        }
                        return riteway_1.Try(buffer.write, '');
                    })(),
                    expected: Error('Buffer cannot exceed specified length of 2 items.')
                });
                assert({
                    given: 'length = 2',
                    should: 'throw Error once outbound queue length is exceeded',
                    actual: (function () {
                        var length = 2;
                        var buffer = asyncBuffer_1.asyncBuffer(length);
                        for (var i = 0; i < length; i++) {
                            buffer.read();
                        }
                        // release one value from outbound queue
                        buffer.write('');
                        buffer.read();
                        return riteway_1.Try(buffer.read);
                    })(),
                    expected: Error('Buffer cannot exceed specified length of 2 items.')
                });
                assert({
                    given: '1 write',
                    should: 'return inbound length of 1 & outbound length of 0',
                    actual: (function () {
                        var buffer = asyncBuffer_1.asyncBuffer();
                        buffer.write(1);
                        return [buffer.inboundLength(), buffer.outboundLength()];
                    })(),
                    expected: [1, 0]
                });
                assert({
                    given: '1 read',
                    should: 'return inbound length of 1 & outbound length of 0',
                    actual: (function () {
                        var buffer = asyncBuffer_1.asyncBuffer();
                        buffer.read();
                        return [buffer.inboundLength(), buffer.outboundLength()];
                    })(),
                    expected: [0, 1]
                });
                assert({
                    given: '1 write and then 1 read',
                    should: 'return inbound length of 0 & outbound length of 0',
                    actual: (function () {
                        var buffer = asyncBuffer_1.asyncBuffer();
                        buffer.read();
                        buffer.write(1);
                        return [buffer.inboundLength(), buffer.outboundLength()];
                    })(),
                    expected: [0, 0]
                });
                assert({
                    given: '1 read and then 1 write',
                    should: 'return inbound length of 0 & outbound length of 0',
                    actual: (function () {
                        var buffer = asyncBuffer_1.asyncBuffer();
                        buffer.read();
                        buffer.write(1);
                        return [buffer.inboundLength(), buffer.outboundLength()];
                    })(),
                    expected: [0, 0]
                });
                assert({
                    given: '1 read, then 1 write and then 1 read',
                    should: 'return inbound length of 0 & outbound length of 1',
                    actual: (function () {
                        var buffer = asyncBuffer_1.asyncBuffer();
                        buffer.read();
                        buffer.write(1);
                        buffer.read();
                        return [buffer.inboundLength(), buffer.outboundLength()];
                    })(),
                    expected: [0, 1]
                });
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=asyncBuffer.test.js.map