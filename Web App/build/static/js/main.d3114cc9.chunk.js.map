{"version":3,"sources":["serviceWorker.js","assets/theme/theme.js","views/Login/Login.js","views/CreateAccount/CreateAccount.js","views/ForgotPassword/ForgotPassword.js","components/Header/Header.js","views/HomePage/HomePage.js","views/ViewHistory/ViewHistory.js","views/ViewPatientProfile/ViewPatientProfile.js","assets/jss/material-dashboard-react.js","assets/jss/material-dashboard-react/components/cardStyle.js","components/Card/Card.js","assets/jss/material-dashboard-react/components/cardAvatarStyle.js","components/Card/CardAvatar.js","assets/jss/material-dashboard-react/components/cardHeaderStyle.js","components/Card/CardHeader.js","assets/jss/material-dashboard-react/components/cardBodyStyle.js","components/Card/CardBody.js","views/YourProfile/YourProfile.js","views/LiveReadings/LiveReadings.js","views/AddPatient/AddPatient.js","index.js"],"names":["Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","typography","h2","fontFamily","useStyles","makeStyles","root","display","paper","marginTop","spacing","flexDirection","alignItems","toolBar","minHeight","appBar","submit","margin","height","CssTextField","withStyles","color","borderBottomColor","borderColor","TextField","LoginSchema","Yup","shape","Username","min","max","required","Password","Login","props","React","useState","visible","setVisible","openError","SetOpenError","classes","forgotPassword","createAccount","ThemeProvider","AppBar","position","className","Toolbar","Slide","direction","in","timeout","Typography","variant","title","initialValues","validationSchema","onSubmit","values","actions","a","fetch","seed","json","parsedSeed","localStorage","setItem","JSON","stringify","SEED","history","push","setSubmitting","errors","touched","handleBlur","handleChange","handleSubmit","isSubmitting","handleReset","disabled","fullWidth","id","label","value","onChange","onBlur","helperText","error","autoComplete","Button","type","style","fontSize","CircularProgress","Grid","container","item","xs","Link","component","link","to","Dialog","maxWidth","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","onClick","form","width","marginTopAppBar","SignUpSchema","Name","matches","Specialization","Email","email","Address","Contact","test","val","toString","length","confirmPassword","oneOf","appBarSpacer","mixins","toolbar","zIndex","drawer","flexShrink","drawerPaper","drawerContainer","overflow","content","flexGrow","padding","SvgIcon","marginBottom","marginRight","buttons","withRouter","dialogOpen","setDialogOpen","anchorEl","setAnchorEl","dialogClose","CssBaseline","noWrap","date","Date","hours","getHours","IconButton","aria-label","aria-controls","aria-haspopup","event","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","Divider","clear","name","StyledTableCell","head","backgroundColor","common","white","body","TableCell","StyledTableRow","TableRow","table","minWidth","titletext","top","left","ErrorMessage","labels","sideButton","background","boxShadow","borderRadius","tileTopText","marginLeft","fontWeight","lineHeight","tileBottomText","textAlign","rightBar","justifyContent","cardBody","gridTemplateRows","gridTemplateColumns","flexWrap","border","minicard","ViewPatientProfile","address","useParams","circularVisible","SetCircularVisible","openGenerateReport","setOpenGenerateReport","openDischarge","setOpenDischarge","dischargeDialogue","SetDischargeDialogue","Response","SetResponse","LastReading","SetLastReading","SetName","age","SetAge","Empty","SetEmpty","getItem","dischargePatient","response","resObj","useEffect","obj","Profile","responseTx","resObjTx","parse","console","log","getProfile","size","headerText","join","Card","HR","Temp","BP","diastolic","systolic","startIcon","hexToRgb","input","replace","Error","first","second","last","toUpperCase","parseInt","primaryColor","warningColor","dangerColor","successColor","infoColor","roseColor","grayColor","primaryBoxShadow","infoBoxShadow","successBoxShadow","warningBoxShadow","dangerBoxShadow","roseBoxShadow","warningCardHeader","successCardHeader","dangerCardHeader","infoCardHeader","primaryCardHeader","roseCardHeader","paddingTop","borderTop","textDecoration","cardStyle","card","wordWrap","cardPlain","cardProfile","cardChart","styles","children","plain","profile","chart","rest","cardClasses","classNames","undefined","cardAvatarStyle","cardAvatar","cardAvatarProfile","maxHeight","cardAvatarPlain","CardAvatar","cardAvatarClasses","cardHeaderStyle","cardHeader","borderBottom","cardHeaderPlain","cardHeaderStats","cardHeaderIcon","CardHeader","stats","icon","cardHeaderClasses","cardBodyStyle","flex","WebkitBoxFlex","cardBodyPlain","paddingLeft","paddingRight","cardBodyProfile","CardBody","cardBodyClasses","YourProfile","seedInfo","align","src","alt","specialization","contact","LiveReadings","biPolarBarChartData","series","biPolarBarChartOptions","high","low","axisX","labelInterpolationFnc","index","data","options","qr","avatar","AddPatientSchema","Age","positive","Gender","ReactDOM","render","path","exact","SetSeed","SetPassword","setOpen","preventDefault","newObj","password","handleClose","reload","Container","e","target","SetParsedSeed","signIn","method","headers","info","x","displaySeed","sm","justify","empty","getPatient","TableContainer","Paper","Table","TableHead","TableBody","map","row","key","ID","scope","gender","ADDRESS","moment","format","SetDate","DeviceAddress","SetDeviceAddress","onDateChange","deviceNum","secLevel","then","result","resp","alert","select","libInstance","utils","DateFnsUtils","maxDate","inputVariant","autoOk","inputValue","historyDate","setHistoryDate","array","setArray","historyArray","setDate","setInputValue","i","parsed","TimeStamp","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d3114cc9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nconst theme = createMuiTheme({\r\n\r\n    palette: {\r\n        primary: {\r\n            main: '#08696b'\r\n        },\r\n        secondary: {\r\n            main: '#FFFFFF'\r\n        }\r\n    },\r\n    typography: {\r\n        h2: {\r\n            fontFamily: 'Roboto Slab'\r\n        }\r\n    },\r\n})\r\nexport default theme","import React from \"react\";\r\nimport { Typography, withStyles } from \"@material-ui/core\"\r\nimport { makeStyles, Grid, Button, AppBar, Toolbar, TextField, Link, ThemeProvider, Slide, CircularProgress } from '@material-ui/core'\r\nimport { Dialog, DialogContent, DialogContentText, DialogTitle, DialogActions } from '@material-ui/core'\r\nimport theme from \"../../assets/theme/theme\"\r\nimport { Link as link } from \"react-router-dom\"\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(35),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    toolBar: {\r\n        minHeight: \"180px\",\r\n    },\r\n    appBar: {\r\n        alignItems: \"center\"\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(6, 0, 2),\r\n        height: \"70px\"\r\n    },\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        '& label': {\r\n            color: 'white',\r\n        },\r\n        '& label.Mui-focused': {\r\n            color: 'cyan',\r\n        },\r\n\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'cyan',\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'white',\r\n            },\r\n            '& ': {\r\n                color: 'white'\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'cyan',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'cyan',\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nconst LoginSchema = Yup.object().shape({\r\n    Username: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required'),\r\n    Password: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required')\r\n});\r\n\r\nconst Login = (props) => {\r\n\r\n    // const handleClick = async (event) => {\r\n    //     setVisible(true)\r\n    //     var seed = await fetch(`https://thetamiddleware.herokuapp.com/getSeed/${userName}&${password}`);\r\n    //     var parsedSeed = await seed.json();\r\n    //     localStorage.setItem('seedInfo', JSON.stringify(parsedSeed[1]));\r\n    //     if (parsedSeed[0]) {\r\n    //         localStorage.setItem('seed', parsedSeed[1].SEED);\r\n    //         props.history.push('/dashboard')\r\n    //     }\r\n    //     else {\r\n    //         SetOpenError(true)\r\n    //     }\r\n    // }\r\n\r\n    const [visible, setVisible] = React.useState(false);\r\n    const [openError, SetOpenError] = React.useState(false);\r\n\r\n    const classes = useStyles();\r\n    const forgotPassword = visible ? '#' : '/forgotpassword';\r\n    const createAccount = visible ? '#' : '/createaccount';\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolBar}>\r\n                    <Slide direction=\"down\" in={true} timeout={300}>\r\n                        <Typography variant=\"h3\" className={classes.title}>\r\n                            LOGIN TO PORTAL\r\n                            </Typography>\r\n                    </Slide>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Slide direction=\"down\" in={true} timeout={300}>\r\n                <main>\r\n                    <div className={classes.paper}>\r\n                        <Formik\r\n                            initialValues={{\r\n                                Username: '',\r\n                                Password: '',\r\n                            }}\r\n                            validationSchema={LoginSchema}\r\n                            onSubmit={async (values, actions) => {\r\n                                setVisible(true)\r\n                                var seed = await fetch(`https://thetamiddleware.herokuapp.com/getSeed/${values.Username}&${values.Password}`);\r\n                                var parsedSeed = await seed.json();\r\n                                localStorage.setItem('seedInfo', JSON.stringify(parsedSeed[1]));\r\n                                if (parsedSeed[0]) {\r\n                                    localStorage.setItem('seed', parsedSeed[1].SEED);\r\n                                    props.history.push('/dashboard')\r\n                                    actions.setSubmitting(false)\r\n                                }\r\n                                else {\r\n                                    SetOpenError(true)\r\n                                }\r\n                            }}\r\n                        >\r\n                            {({ errors, touched, values, handleBlur, handleChange, handleSubmit, isSubmitting, handleReset }) => (\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <CssTextField\r\n                                        variant=\"outlined\"\r\n                                        margin=\"normal\"\r\n                                        disabled={isSubmitting}\r\n                                        required\r\n                                        fullWidth\r\n                                        id=\"Username\"\r\n                                        label=\"Username\"\r\n                                        value={values.Username}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        helperText={touched.Username ? errors.Username : \"\"}\r\n                                        error={touched.Username && Boolean(errors.Username)}\r\n                                        autoComplete=\"off\"\r\n                                    />\r\n                                    <CssTextField\r\n                                        variant=\"outlined\"\r\n                                        // type=\"password\"\r\n                                        margin=\"normal\"\r\n                                        disabled={isSubmitting}\r\n                                        required\r\n                                        fullWidth\r\n                                        id=\"Password\"\r\n                                        label=\"Password\"\r\n                                        value={values.Password}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        helperText={touched.Password ? errors.Password : \"\"}\r\n                                        error={touched.Password && Boolean(errors.Password)}\r\n                                        autoComplete=\"off\"\r\n                                    />\r\n\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        fullWidth\r\n                                        disabled={isSubmitting}\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        style={{ fontSize: 20 }}\r\n                                        className={classes.submit}\r\n                                    >\r\n                                        {isSubmitting ? <CircularProgress color=\"secondary\" /> : 'Log in'}\r\n\r\n                                    </Button>\r\n\r\n                                    <Grid container>\r\n                                        <Grid item xs>\r\n                                            <Link\r\n                                                component={link}\r\n                                                disabled={visible}\r\n                                                to={forgotPassword}\r\n                                                color=\"secondary\"\r\n                                                variant=\"body2\">\r\n                                                Forgot password?\r\n                                            </Link>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Link\r\n                                                component={link}\r\n                                                disabled={visible}\r\n                                                to={createAccount}\r\n                                                color=\"secondary\"\r\n                                                variant=\"body2\">\r\n                                                {\"Create New Account\"}\r\n                                            </Link>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Dialog\r\n                                        maxWidth=\"md\"\r\n                                        open={openError}\r\n                                        onClose={() => {\r\n                                            SetOpenError(false)\r\n                                            handleReset()\r\n                                        }}\r\n                                    >\r\n                                        <DialogTitle>Invalid Credentials</DialogTitle>\r\n                                        <DialogContent>\r\n                                            <DialogContentText>\r\n                                                Please verify the Username and/or Password\r\n                                            </DialogContentText>\r\n                                            <DialogActions>\r\n                                                <Button\r\n                                                    onClick={() => {\r\n                                                        SetOpenError(false);\r\n                                                        handleReset()\r\n                                                    }}\r\n                                                    color=\"primary\">\r\n                                                    Okay\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </DialogContent>\r\n                                    </Dialog>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </main>\r\n            </Slide>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport { Button, TextField, Link, Dialog, DialogContent, DialogContentText, DialogTitle, CircularProgress } from '@material-ui/core';\r\nimport { Grid, Typography, makeStyles, Container, DialogActions, Slide, ThemeProvider, withStyles } from '@material-ui/core';\r\nimport { AppBar, Toolbar } from \"@material-ui/core\"\r\nimport theme from \"../../assets/theme/theme\"\r\nimport { Link as link } from \"react-router-dom\"\r\nimport QRCode from \"qrcode.react\"\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    toolBar: {\r\n        minHeight: \"180px\",\r\n    },\r\n    appBar: {\r\n        alignItems: \"center\"\r\n    },\r\n    marginTopAppBar: {\r\n        marginTop: theme.spacing(24)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(6, 0, 2),\r\n        height: \"70px\"\r\n    }\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        '& label': {\r\n            color: 'white',\r\n        },\r\n        '& label.Mui-focused': {\r\n            color: 'cyan',\r\n        },\r\n\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'cyan',\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'white',\r\n            },\r\n            '& ': {\r\n                color: 'white'\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'cyan',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'cyan',\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nconst SignUpSchema = Yup.object().shape({\r\n    Name: Yup.string()\r\n        .matches(/^[A-Za-z ]+$/, 'No special characters or numbers allowed')\r\n        .min(2, 'Too Short!')\r\n        .max(20, 'Too Long!')\r\n        .required('Required'),\r\n    Specialization: Yup.string()\r\n        .matches(/^[A-Za-z ]+$/, 'No special characters or numbers allowed')\r\n        .min(2, 'Too Short!')\r\n        .max(20, 'Too Long!')\r\n        .required('Required'),\r\n    Email: Yup.string()\r\n        .email(\"Please enter a valid e-mail address\")\r\n        .required(\"Please enter e-mail address\"),\r\n    Address: Yup.string().required(\"Please state your address\"),\r\n    Contact: Yup.string()\r\n        .required(\"Please state your contact number\")\r\n        .test('len', 'Invalid contact detail', val => val && val.toString().length === 10),\r\n    Username: Yup.string()\r\n        .required(\"Please enter your desired username\")\r\n        .matches(/^[A-Za-z]+$/, 'No special characters or numbers allowed')\r\n        .min(2, 'Too Short!')\r\n        .max(20, 'Too Long!')\r\n        .required('Required'),\r\n    Password: Yup.string()\r\n        .required(\"Enter your password\")\r\n        .min(8, \"Password must contain at least 8 characters\"),\r\n    confirmPassword: Yup.string()\r\n        .required(\"Confirm your password\")\r\n        .oneOf([Yup.ref(\"Password\")], \"Password does not match\")\r\n});\r\n\r\nexport default function SignUp(props) {\r\n    const classes = useStyles();\r\n    const [visible, setVisible] = React.useState(false);\r\n    const [parsedSeed, SetParsedSeed] = React.useState('')\r\n    const [open, setOpen] = React.useState(false);\r\n    const signIn = visible ? '#' : '/';\r\n\r\n    const handleSubmit = async (values, actions) => {\r\n        setVisible(true)\r\n        var profile = {\r\n            name: values.Name,\r\n            specialization: values.Specialization,\r\n            address: values.Address,\r\n            contact: values.Contact,\r\n            email: values.Email\r\n        }\r\n        console.log(\"anday waala burger\")\r\n        var seed = await fetch('https://thetamiddleware.herokuapp.com/addSeed/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: values.Username,\r\n                password: values.Password,\r\n                info: profile\r\n            }\r\n            )\r\n        });\r\n        var x = await seed.json()\r\n        console.log(x)\r\n        SetParsedSeed(x) \r\n        actions.setSubmitting(false)\r\n        console.log(\"Done\")\r\n        setOpen(true)\r\n        actions.handleReset()\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        props.history.push('/')\r\n    }\r\n\r\n    var displaySeed = parsedSeed\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolBar}>\r\n                    <Slide direction=\"down\" in={true} timeout={300}>\r\n                        <Typography variant=\"h3\" className={classes.title}>\r\n                            SIGN UP\r\n                        </Typography>\r\n                    </Slide>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={classes.marginTopAppBar} />\r\n            <Slide direction=\"down\" in={true} timeout={300}>\r\n                <Container component=\"main\" maxWidth=\"sm\">\r\n                    <div className={classes.paper}>\r\n                        <Formik\r\n                            initialValues={{\r\n                                Name: '',\r\n                                Age: '',\r\n                                Email: '',\r\n                                Specialization: '',\r\n                                Address: '',\r\n                                Contact: '',\r\n                                Username: '',\r\n                                Password: '',\r\n                                confirmPassword: '',\r\n                            }}\r\n                            validationSchema={SignUpSchema}\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            {({ errors, touched, values, handleBlur, handleChange, handleSubmit, isSubmitting, handleReset }) => (\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item xs={12}>\r\n                                            <CssTextField\r\n                                                disabled={isSubmitting}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                id=\"Name\"\r\n                                                label=\"Full Name\"\r\n                                                value={values.Name}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                helperText={touched.Name ? errors.Name : \"\"}\r\n                                                error={touched.Name && Boolean(errors.Name)}\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <CssTextField\r\n                                                disabled={isSubmitting}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                id=\"Specialization\"\r\n                                                label=\"Specialization\"\r\n                                                value={values.Specialization}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                helperText={touched.Specialization ? errors.Specialization : \"\"}\r\n                                                error={touched.Specialization && Boolean(errors.Specialization)}\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <CssTextField\r\n                                                disabled={isSubmitting}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                id=\"Email\"\r\n                                                label=\"Email Address\"\r\n                                                autoComplete=\"email\"\r\n                                                value={values.Email}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                helperText={touched.Email ? errors.Email : \"\"}\r\n                                                error={touched.Email && Boolean(errors.Email)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <CssTextField\r\n                                                disabled={isSubmitting}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                type=\"number\"\r\n                                                id=\"Contact\"\r\n                                                label=\"Contact Number\"\r\n                                                value={values.Contact}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                helperText={touched.Contact ? errors.Contact : \"\"}\r\n                                                error={touched.Contact && Boolean(errors.Contact)}\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <CssTextField\r\n                                                disabled={isSubmitting}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                id=\"Address\"\r\n                                                label=\"Address\"\r\n                                                value={values.Address}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                helperText={touched.Address ? errors.Address : \"\"}\r\n                                                error={touched.Address && Boolean(errors.Address)}\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={12}>\r\n                                            <CssTextField\r\n                                                disabled={isSubmitting}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                label=\"Username\"\r\n                                                id=\"Username\"\r\n                                                value={values.Username}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                helperText={touched.Username ? errors.Username : \"\"}\r\n                                                error={touched.Username && Boolean(errors.Username)}\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={12}>\r\n                                            <CssTextField\r\n                                                disabled={isSubmitting}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                label=\"Password\"\r\n                                                type=\"password\"\r\n                                                id=\"Password\"\r\n                                                value={values.Password}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                helperText={touched.Password ? errors.Password : \"\"}\r\n                                                error={touched.Password && Boolean(errors.Password)}\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <CssTextField\r\n                                                disabled={isSubmitting}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                label=\"Confirm Password\"\r\n                                                type=\"password\"\r\n                                                id=\"confirmPassword\"\r\n                                                value={values.confirmPassword}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                helperText={touched.confirmPassword ? errors.confirmPassword : \"\"}\r\n                                                error={touched.confirmPassword && Boolean(errors.confirmPassword)}\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        disabled={isSubmitting}\r\n                                        fullWidth\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        style={{ fontSize: 20 }}\r\n                                        className={classes.submit}\r\n                                    >\r\n                                        {isSubmitting ? <CircularProgress color=\"secondary\" /> : 'Sign Up'}\r\n                                    </Button>\r\n                                    <Dialog\r\n                                        maxWidth=\"md\"\r\n                                        open={open}\r\n                                        onClose={handleClose}\r\n                                    >\r\n                                        <DialogTitle>Account Created Successfully</DialogTitle>\r\n                                        <DialogContent>\r\n                                            <DialogContentText>\r\n                                                Kindly keep the Seed ID safe. Your Seed ID is: {displaySeed}. Your QR is:\r\n                                            </DialogContentText>\r\n                                            <QRCode value={displaySeed} />\r\n                                            <DialogActions>\r\n                                                <Button onClick={handleClose} color=\"primary\">\r\n                                                    Save QR\r\n                                                </Button>\r\n                                                <Button onClick={handleClose} color=\"primary\">\r\n                                                    Close\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                        </DialogContent>\r\n                                    </Dialog>\r\n                                    <Grid container justify=\"flex-end\">\r\n                                        <Grid item>\r\n                                            <Link\r\n                                                to={signIn}\r\n                                                component={link}\r\n                                                color=\"secondary\"\r\n                                                variant=\"body2\">\r\n                                                Already have an account? Sign in\r\n                                            </Link>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </Container>\r\n            </Slide>\r\n        </ThemeProvider>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { Button, TextField, Dialog, DialogContent, DialogContentText, DialogTitle, DialogActions, CircularProgress } from '@material-ui/core';\r\nimport { Grid, Typography, makeStyles, Container, ThemeProvider, Slide } from '@material-ui/core';\r\nimport { AppBar, Toolbar, withStyles } from \"@material-ui/core\"\r\nimport theme from \"../../assets/theme/theme\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    toolBar: {\r\n        minHeight: \"180px\",\r\n    },\r\n    appBar: {\r\n        alignItems: \"center\",\r\n    },\r\n    marginTopAppBar: {\r\n        marginTop: theme.spacing(35)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(6, 0, 2),\r\n        height: \"70px\"\r\n    }\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        '& label': {\r\n            color: 'white',\r\n        },\r\n        '& label.Mui-focused': {\r\n            color: 'cyan',\r\n        },\r\n\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'cyan',\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'white',\r\n            },\r\n            '& ': {\r\n                color: 'white'\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'cyan',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'cyan',\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nexport default function ForgotPassword() {\r\n    const classes = useStyles();\r\n    const [visible, setVisible] = React.useState(false);\r\n    const [seed, SetSeed] = useState('')\r\n    const [Password, SetPassword] = useState('')\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        setVisible(true)\r\n        var obj = await fetch(`https://thetamiddleware.herokuapp.com/forgotPassword/${seed}`);\r\n        setOpen(true)\r\n        var newObj = await obj.json();\r\n        SetPassword(newObj.password)\r\n        console.log(newObj.password)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        window.location.reload(false);\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolBar}>\r\n                    <Slide direction=\"down\" in={true} timeout={300}>\r\n                        <Typography variant=\"h3\" className={classes.title}>\r\n                            FORGOT PASSWORD\r\n                         </Typography>\r\n                    </Slide>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={classes.marginTopAppBar} />\r\n            <Slide direction=\"down\" in={true} timeout={300}>\r\n                <Container component=\"main\" maxWidth=\"sm\">\r\n                    <div className={classes.paper}>\r\n                        <form className={classes.form} onSubmit={handleSubmit}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12}>\r\n                                    <CssTextField\r\n                                        autoComplete=\"fname\"\r\n                                        name=\"enterSeed\"\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        value={seed}\r\n                                        onChange={e => SetSeed(e.target.value)}\r\n                                        fullWidth\r\n                                        id=\"enterSeed\"\r\n                                        label=\"Enter Seed\"\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                disabled={visible}\r\n                                variant=\"contained\"\r\n                                style={{ fontSize: 20 }}\r\n                                color=\"primary\"\r\n                                className={classes.submit}\r\n                            >\r\n                                {visible ? <CircularProgress color=\"secondary\"/> : 'Get Password'}\r\n                        </Button>\r\n                            <Dialog\r\n                                fullWidth\r\n                                maxWidth=\"sm\"\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                            >\r\n                                <DialogTitle>Password Received</DialogTitle>\r\n                                <DialogContent>\r\n                                    <DialogContentText>\r\n                                        {Password !== undefined ? `Your Password is: ${Password}` : 'Invalid Seed'}\r\n                                    </DialogContentText>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleClose} color=\"primary\">\r\n                                            Close\r\n                                    </Button>\r\n                                    </DialogActions>\r\n                                </DialogContent>\r\n                            </Dialog>\r\n                        </form>\r\n                    </div>\r\n                </Container>\r\n            </Slide>\r\n        </ThemeProvider>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, CssBaseline, Toolbar, IconButton, Menu, Typography, DialogContent, DialogContentText, ThemeProvider } from '@material-ui/core';\r\nimport { Divider, Button, MenuItem, SvgIcon, Dialog, DialogTitle, DialogActions, TextField } from \"@material-ui/core\"\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\"\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport theme from \"../../assets/theme/theme\"\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n  },\r\n\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n\r\n  drawerContainer: {\r\n    overflow: 'auto',\r\n  },\r\n\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  SvgIcon: {\r\n    marginBottom: 2,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n  buttons: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n\r\n}));\r\n\r\nconst Header = props => {\r\n  const classes = useStyles();\r\n  const [dialogOpen, setDialogOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const dialogClose = () => {\r\n    setDialogOpen(false)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleChangePassword = () => {\r\n    setDialogOpen(true)\r\n  };\r\n\r\n  const handleProfile = () => {\r\n    props.history.push('/yourprofile')\r\n  }\r\n\r\n  const logOut = () => {\r\n    localStorage.clear()\r\n    props.history.push('/')\r\n  }\r\n  \r\n  const date = () => {\r\n    const date = new Date()\r\n    const hours = date.getHours()\r\n    let timeOfDay\r\n\r\n    if (hours < 12) {\r\n      timeOfDay = \"Good Morning\"\r\n    } else if (hours >= 12 && hours < 17) {\r\n      timeOfDay = \"Good Afternoon\"\r\n    } else {\r\n      timeOfDay = \"Good Evening\"\r\n    }\r\n    return timeOfDay\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <ThemeProvider theme={theme}>\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n          <Toolbar>\r\n            <SvgIcon className={classes.SvgIcon}>\r\n              <LocalHospitalIcon />\r\n            </SvgIcon>\r\n\r\n            <Typography variant=\"h6\" className={classes.title} noWrap>\r\n              {date()}, Doctor\r\n          </Typography>\r\n\r\n\r\n            <div className={classes.buttons}>\r\n              <Button\r\n                component={Link}\r\n                variant=\"outlined\"\r\n                style={{ color: '#FFFFFF' }}\r\n                to=\"/dashboard\">\r\n                Homepage\r\n            </Button>\r\n\r\n              <Button\r\n                component={Link}\r\n                variant=\"outlined\"\r\n                style={{ color: '#FFFFFF' }}\r\n                to=\"/addpatient\">\r\n                Add Patient\r\n            </Button>\r\n            </div>\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n              >\r\n                <MenuItem onClick={handleProfile}>My Profile</MenuItem>\r\n                <MenuItem onClick={handleChangePassword}>Change Password</MenuItem>\r\n                <Divider />\r\n                <MenuItem onClick={logOut}>Log Out</MenuItem>\r\n              </Menu>\r\n\r\n              <Dialog\r\n              fullWidth\r\n                maxWidth=\"sm\"\r\n                open={dialogOpen}\r\n                onClose={dialogClose}\r\n              >\r\n                <DialogTitle>Change Password</DialogTitle>\r\n                <DialogContent>\r\n                  <DialogContentText>\r\n                    Enter your password below in order to change it:\r\n                </DialogContentText>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                  />\r\n                  <DialogActions>\r\n                    <Button onClick={dialogClose} color=\"primary\">\r\n                      Save Password\r\n            </Button>\r\n                    <Button onClick={dialogClose} color=\"primary\">\r\n                      Cancel\r\n            </Button>\r\n                  </DialogActions>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <div className={classes.appBarSpacer} />\r\n      </ThemeProvider>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default withRouter(Header);","import React, { useEffect } from 'react';\r\nimport { withStyles, makeStyles, Table, TableBody, TableCell, TableHead, Link, CircularProgress } from '@material-ui/core';\r\nimport { TableRow, Paper, Typography, ThemeProvider, Slide, TableContainer } from '@material-ui/core';\r\nimport Header from \"../../components/Header/Header\"\r\nimport theme from \"../../assets/theme/theme\"\r\nimport { Link as link } from \"react-router-dom\"\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    }\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles(() => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: \"#06c2c892\",\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    content: {\r\n        padding: theme.spacing(3)\r\n    },\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n    titletext: {\r\n        marginBottom: \"40px\"\r\n    },\r\n    CircularProgress: {\r\n        position: \"absolute\",\r\n        top: \"45%\",\r\n        left: \"46%\"\r\n    }\r\n}));\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <div style={{ fontSize: \"2rem\", color: \"#6af2fd\" }}>\r\n            Currently, there are no patients under your supervision\r\n        </div>\r\n    )\r\n}\r\nexport default function HomePage() {\r\n    const [Response, SetResponse] = React.useState([]);\r\n    const [visible, setVisible] = React.useState(true);\r\n    const [empty, SetEmpty] = React.useState(false)\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        async function getPatient() {\r\n            var seed = (localStorage.getItem('seed') || '')\r\n            var obj = await fetch(`https://thetamiddleware.herokuapp.com/getAllAddresses/${seed}`)\r\n            obj = await obj.json()\r\n            console.log(obj)\r\n            if (obj === false)\r\n                SetEmpty(true)\r\n            SetResponse(obj)\r\n            console.log(empty)\r\n            setVisible(false)\r\n        }\r\n        getPatient()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //console.log(Response)\r\n    }, [Response])\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Header />\r\n            {visible ? <CircularProgress className={classes.CircularProgress} color=\"secondary\" size={100} /> :\r\n                <Slide direction=\"down\" in={true} timeout={300}>\r\n                    <div className={classes.content}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            align=\"center\"\r\n                            color=\"secondary\"\r\n                            className={classes.titletext}>\r\n                            Current Patients\r\n                    </Typography>\r\n                        {empty ? <ErrorMessage /> :\r\n                            <Slide direction=\"up\" in={true} timeout={300}>\r\n                                <TableContainer component={Paper}>\r\n                                    <Table className={classes.table}>\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <StyledTableCell align=\"center\">Patient's ID</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">Name</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">Age</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">Gender</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">Date of Admission</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">Contact</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">Action</StyledTableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {\r\n                                                // rows.map((row) => (\r\n                                                //     <StyledTableRow key={row.id}>\r\n                                                //         <StyledTableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                                                //             {row.id}\r\n                                                //         </StyledTableCell>\r\n                                                //         <StyledTableCell align=\"center\">{row.name}</StyledTableCell>\r\n                                                //         <StyledTableCell align=\"center\">{row.age}</StyledTableCell>\r\n                                                //         <StyledTableCell align=\"center\">\r\n                                                //             <Link\r\n                                                //                 component={link}\r\n                                                //                 to=\"/viewpatientprofile\"\r\n                                                //                 variant=\"body2\"\r\n                                                //             >\r\n                                                //                 View Profile\r\n                                                //             </Link>\r\n                                                //         </StyledTableCell>\r\n                                                //     </StyledTableRow>\r\n                                                // ))\r\n\r\n                                                Response.map((row) => (\r\n                                                    <StyledTableRow key={row.ID}>\r\n                                                        <StyledTableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                                                            {row.ID}\r\n                                                        </StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{row.Profile.name}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{row.Profile.age}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{row.Profile.gender}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{row.Profile.date}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{row.Profile.contact}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">\r\n                                                            <Link\r\n                                                                component={link}\r\n                                                                to={`/viewpatientprofile/${row.ADDRESS}`}\r\n                                                                variant=\"body2\"\r\n                                                            >\r\n                                                                View Profile\r\n                                                     </Link>\r\n                                                        </StyledTableCell>\r\n                                                    </StyledTableRow>\r\n                                                ))\r\n                                            }\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </Slide>\r\n                        }\r\n                    </div>\r\n                </Slide>}\r\n        </ThemeProvider>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead } from '@material-ui/core';\r\nimport { TableRow, Paper, Typography, Grid, ThemeProvider, Slide, CircularProgress } from '@material-ui/core';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from \"@material-ui/core\"\r\nimport Header from \"../../components/Header/Header\"\r\nimport theme from \"../../assets/theme/theme\"\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport moment from \"moment\";\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: \"#06c2c892\",\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    content: {\r\n        padding: theme.spacing(3)\r\n    },\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n    labels: {\r\n        padding: theme.spacing(3)\r\n    },\r\n    CircularProgress: {\r\n        position: \"absolute\",\r\n        top: \"45%\",\r\n        left: \"46%\"\r\n    }\r\n}));\r\n\r\nexport default function ViewHistory() {\r\n    const classes = useStyles();\r\n    const [circularVisible, SetCircularVisible] = React.useState(true)\r\n    const [Empty, SetEmpty] = React.useState(false)\r\n    const { name, age, address } = useParams();\r\n    const [historyDate, setHistoryDate] = React.useState(true);\r\n    const [array, setArray] = React.useState();\r\n    let historyArray = [];\r\n    const [date, setDate] = useState(moment());\r\n    const [inputValue, setInputValue] = useState(moment().format(\"DD-MM-YYYY\"));\r\n\r\n    const onDateChange = (date, value) => {\r\n        setDate(value);\r\n        setInputValue(value);\r\n    };\r\n    const getProfile = async () => {\r\n        setHistoryDate(false)\r\n        var response = await fetch(`https://thetamiddleware.herokuapp.com/getAllHash/${address}&${date}`);\r\n        var resObj = await response.json();\r\n        if (resObj.length === 0) {\r\n            SetEmpty(true)\r\n        }\r\n        // Alert.alert(\"All Hashes\", JSON.stringify(resObj.length));\r\n        for (var i = 0; i < resObj.length; i++) {\r\n            var responseTx = await fetch(`https://thetamiddleware.herokuapp.com/getTx/${resObj[i].toString()}`);\r\n            var resObjTx = await responseTx.json();\r\n            var parsed = JSON.parse(resObjTx)\r\n            historyArray.push(parsed)\r\n        }\r\n        setArray(historyArray)\r\n        SetCircularVisible(false)\r\n    }\r\n    useEffect(() => {\r\n    }, [array])\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Header />\r\n            <Dialog\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n                open={historyDate}\r\n                onClose={() => { setHistoryDate(false) }}\r\n            >\r\n                <DialogTitle>Enter the date of the day for which the history is required:</DialogTitle>\r\n                <DialogContent align=\"center\">\r\n                    <MuiPickersUtilsProvider libInstance={moment} utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            autoOk={true}\r\n                            value={date}\r\n                            inputValue={inputValue}\r\n                            onChange={onDateChange}\r\n                            format=\"dd-MM-yyyy\"\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={getProfile}\r\n                            color=\"primary\">\r\n                            Confirm\r\n                            </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n            <Dialog\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n                open={Empty}\r\n                onClose={() => window.location.reload(false)}\r\n            >\r\n                <DialogTitle>There are no values for the desired date.</DialogTitle>\r\n                <DialogContent align=\"center\">\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={() => window.location.reload(false)}\r\n                            color=\"primary\">\r\n                            Go Back\r\n                        </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n            {circularVisible ? <CircularProgress className={classes.CircularProgress} color=\"secondary\" /> :\r\n                <div className={classes.content}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <Slide direction=\"down\" in={true} timeout={300}>\r\n                                <Typography\r\n                                    variant=\"h2\"\r\n                                    color=\"secondary\">\r\n                                    Patient's Profile\r\n                        </Typography>\r\n                            </Slide>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Slide direction=\"down\" in={true} timeout={300}>\r\n                        <Grid container className={classes.labels}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h4\" className={classes.headerText} color=\"secondary\">\r\n                                    Patient's Name:\r\n                            </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography variant=\"h4\" >\r\n                                    {name}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Slide>\r\n\r\n                    <Slide direction=\"down\" in={true} timeout={300}>\r\n                        <Grid container className={classes.labels}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h4\" className={classes.headerText} color=\"secondary\">\r\n                                    Patient's Age:\r\n                    </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                                <Typography variant=\"h4\">\r\n                                    {age}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Slide>\r\n                    {Empty ? \"\" :\r\n                        <Slide direction=\"left\" in={true} timeout={500}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table className={classes.table}>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <StyledTableCell align=\"center\">Timestamp</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">Heart Rate(BPM)</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">Body Temp (F)</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">Systolic BP</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">Diastolic BP</StyledTableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {array?.map((row) => (\r\n                                            <StyledTableRow key={row.TimeStamp}>\r\n                                                <StyledTableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                                                    {row.TimeStamp}\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{row.HR}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{row.Temp}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{row.BP.systolic}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{row.BP.diastolic}</StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Slide>}\r\n                </div>}\r\n        </ThemeProvider>\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\"\r\nimport { Typography, makeStyles, Grid, Card, Button, Dialog, Slide, CircularProgress } from \"@material-ui/core\"\r\nimport { DialogTitle, DialogContentText, DialogContent, DialogActions, ThemeProvider } from \"@material-ui/core\"\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport Header from \"../../components/Header/Header\"\r\nimport theme from \"../../assets/theme/theme\"\r\nimport { Link, useParams } from \"react-router-dom\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        padding: theme.spacing(3),\r\n    },\r\n    labels: {\r\n        padding: theme.spacing(3)\r\n    },\r\n    sideButton: {\r\n        fontSize: \"large\",\r\n        marginRight: \"20px\",\r\n        width: \"361px\",\r\n        height: \"107px\",\r\n        background: \"#FFFFFF\",\r\n        boxShadow: \"0px 0px 7px rgba(0, 0, 0, 0.28)\",\r\n        borderRadius: \"12px\",\r\n    },\r\n    tileTopText: {\r\n        marginTop: \"5px\",\r\n        marginLeft: \"10px\",\r\n        fontSize: \"25px\",\r\n        fontWeight: \"normal\",\r\n        lineHeight: \"35px\",\r\n        color: \"#FFFFFF\"\r\n    },\r\n    tileBottomText: {\r\n        textAlign: \"right\",\r\n        marginTop: \"60px\",\r\n        marginRight: \"10px\",\r\n        fontSize: \"30px\",\r\n        fontWeight: \"normal\",\r\n        lineHeight: \"30px\",\r\n        color: \"rgba(0, 0, 0, 0.57)\"\r\n    },\r\n    rightBar: {\r\n        marginTop: \"20px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"flex-end\"\r\n    },\r\n    cardBody: {\r\n        display: 'grid',\r\n        gridTemplateRows: '1fr 1fr',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        flexWrap: 'wrap',\r\n        width: '530px',\r\n        height: '400px',\r\n        background: '#08696b',\r\n        border: '2px solid #23adc1',\r\n        boxShadow: ' 0px 0px 7px rgba(0, 0, 0, 0.28)',\r\n        borderRadius: '12px',\r\n    },\r\n    minicard: {\r\n        position: \"relative\",\r\n        margin: '11%',\r\n        background: '#23adc1',\r\n        borderRadius: '6px'\r\n    },\r\n    CircularProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"46%\",\r\n    },\r\n}));\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <div style={{fontSize:\"2rem\", color: \"#FFFFFF\"}}>\r\n            Currently, there are no readings\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ViewPatientProfile = (props) => {\r\n    let { address } = useParams();\r\n    const [circularVisible, SetCircularVisible] = React.useState(true)\r\n    const [openGenerateReport, setOpenGenerateReport] = React.useState(false);\r\n    const [openDischarge, setOpenDischarge] = React.useState(false);\r\n    const [dischargeDialogue, SetDischargeDialogue] = React.useState(false);\r\n    const [visible, setVisible] = React.useState(false)\r\n    const [Response, SetResponse] = React.useState();\r\n    const [LastReading, SetLastReading] = React.useState();\r\n    const [name, SetName] = React.useState()\r\n    const [age, SetAge] = React.useState()\r\n    const [Empty, SetEmpty] = React.useState(false)\r\n    const seed = (localStorage.getItem('seed') || '')\r\n\r\n    const dischargePatient = async () => {\r\n        setVisible(true)\r\n        var response = await fetch(`https://thetamiddleware.herokuapp.com/dropAddress/${seed}&${address}`)\r\n        var resObj = await response.json();\r\n        SetDischargeDialogue(resObj)\r\n        setVisible(false)\r\n    }\r\n    const redirect = () => {\r\n        SetDischargeDialogue(false)\r\n        props.history.push('/dashboard')\r\n    }\r\n    useEffect(() => {\r\n        async function getProfile() {\r\n            var obj = await fetch(`https://thetamiddleware.herokuapp.com/getAddressInfo/${seed}&${address}`)\r\n            obj = await obj.json()\r\n            SetName(obj.Profile.name)\r\n            SetAge(obj.Profile.age)\r\n            //Returns Hash\r\n            var response = await fetch(`https://thetamiddleware.herokuapp.com/getLastTx/${address}`);\r\n            var resObj = await response.json();\r\n            if (resObj !== false) {\r\n                //Passing Hash of transaction\r\n                var responseTx = await fetch(`https://thetamiddleware.herokuapp.com/getTx/${resObj}`);\r\n                var resObjTx = await responseTx.json();\r\n                resObjTx = JSON.parse(resObjTx)\r\n                if (resObjTx !== null) {\r\n                    SetEmpty(false)\r\n                    SetCircularVisible(false)\r\n                    SetLastReading(resObjTx)\r\n                    SetResponse(obj)\r\n                }\r\n            }\r\n            else {\r\n                SetEmpty(true)\r\n                console.log(\"Yahan kuch nahi hai bhai\")\r\n                SetCircularVisible(false)\r\n            }\r\n        }\r\n        getProfile()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [Response])\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Header />\r\n            {circularVisible ? <CircularProgress className={classes.CircularProgress} color=\"secondary\" size={100} /> :\r\n                <div className={classes.content}>\r\n                    <Grid container>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item>\r\n                                <Slide direction=\"down\" in={true} timeout={300}>\r\n                                    <Typography\r\n                                        variant=\"h2\"\r\n                                        color=\"secondary\">\r\n                                        Patient's Profile\r\n                                    </Typography>\r\n                                </Slide>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Slide direction=\"down\" in={true} timeout={300}>\r\n                            <Grid container className={classes.labels}>\r\n                                <Grid item>\r\n                                    <Typography variant=\"h4\" className={classes.headerText} color=\"secondary\">\r\n                                        Patient's Name:\r\n                                 </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant=\"h4\">\r\n                                        {name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Slide>\r\n                        <Slide direction=\"down\" in={true} timeout={300}>\r\n                            <Grid container className={classes.labels}>\r\n                                <Grid item>\r\n                                    <Typography variant=\"h4\" className={classes.headerText} color=\"secondary\">\r\n                                        Patient's Age:\r\n                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant=\"h4\">\r\n                                        {age}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Slide>\r\n\r\n                        <Slide direction=\"right\" in={true} timeout={300}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h2\" color=\"secondary\" className={[classes.headerText, classes.labels].join(' ')}>Vitals</Typography>\r\n                            </Grid>\r\n                        </Slide>\r\n                        <Slide direction=\"right\" in={true} timeout={300}>\r\n                            <Grid container>\r\n                                <Card className={classes.cardBody}>\r\n                                    {Empty ? <ErrorMessage/> :\r\n                                        <>\r\n                                            <Card className={classes.minicard}>\r\n                                                <Typography variant=\"h6\" className={classes.tileTopText}>Heart Rate</Typography>\r\n                                                <Typography variant=\"h6\" className={classes.tileBottomText}>{LastReading?.HR} BPM</Typography>\r\n                                            </Card>\r\n                                            <Card className={classes.minicard}>\r\n                                                <Typography variant=\"h6\" className={classes.tileTopText}>Temperature</Typography>\r\n                                                <Typography variant=\"h6\" className={classes.tileBottomText}>{LastReading?.Temp} F</Typography>\r\n                                            </Card>\r\n\r\n                                            <Card className={classes.minicard}>\r\n                                                <Typography variant=\"h6\" className={classes.tileTopText}>BP (mm/Hg)</Typography>\r\n                                                <Typography variant=\"h6\" className={classes.tileBottomText}>{`${LastReading?.BP.diastolic}/${LastReading?.BP.systolic}`}</Typography>\r\n                                            </Card>\r\n                                        </>\r\n                                    }\r\n                                </Card>\r\n                            </Grid>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Slide direction=\"left\" in={true} timeout={500}>\r\n                        <Grid container className={classes.rightBar}>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<AssessmentIcon />}\r\n                                    className={classes.sideButton}\r\n                                    disabled={Empty}\r\n                                    color=\"primary\"\r\n                                    onClick={() => { setOpenGenerateReport(true) }}>\r\n                                    Generate Report</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<AssignmentTurnedInIcon />}\r\n                                    className={classes.sideButton}\r\n                                    color=\"primary\"\r\n                                    onClick={() => { setOpenDischarge(true) }}>\r\n                                    Discharge</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    component={Link}\r\n                                    to={`/viewhistory/${name}&${age}&${address}`}\r\n                                    variant=\"outlined\"\r\n                                    disabled={Empty}\r\n                                    startIcon={<HistoryIcon />}\r\n                                    color=\"primary\"\r\n                                    className={classes.sideButton}>\r\n                                    View History</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    component={Link}\r\n                                    disabled={Empty}\r\n                                    to=\"/livereadings\"\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<TimelineIcon />}\r\n                                    className={classes.sideButton}>\r\n                                    Live Statistics\r\n                    </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Slide>\r\n\r\n                    <Dialog\r\n                        fullWidth\r\n                        maxWidth=\"sm\"\r\n                        open={openGenerateReport}\r\n                        onClose={() => { setOpenGenerateReport(false) }}\r\n                    >\r\n                        <DialogTitle>Generate Report</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Temperature: 100F\r\n                            {<br />}\r\n                            BPM: 85\r\n                            {<br />}\r\n                            Blood Pressure: 120/80\r\n                        </DialogContentText>\r\n\r\n                            <DialogActions>\r\n                                <Button onClick={() => { setOpenGenerateReport(false) }} color=\"primary\">\r\n                                    Download Report\r\n                            </Button>\r\n                                <Button onClick={() => { setOpenGenerateReport(false) }} color=\"primary\">\r\n                                    Cancel\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n\r\n                    <Dialog\r\n                        fullWidth\r\n                        maxWidth=\"sm\"\r\n                        open={openDischarge}\r\n                        onClose={() => { setOpenDischarge(false) }}\r\n                    >\r\n                        <DialogTitle>Discharge Patient</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Are you sure you want to discharge this patient{\"?\"}\r\n                            </DialogContentText>\r\n\r\n                            <DialogActions>\r\n                                <Button onClick={dischargePatient} color=\"primary\" disabled={visible}>\r\n                                    {visible ? <CircularProgress /> : 'Confirm'}\r\n                                </Button>\r\n                                <Button onClick={() => { setOpenDischarge(false) }} color=\"primary\" disabled={visible}>\r\n                                    Cancel\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n\r\n                    <Dialog\r\n                        maxWidth=\"md\"\r\n                        open={dischargeDialogue}\r\n                        onClose={() => SetDischargeDialogue(false)}\r\n                    >\r\n                        <DialogTitle>Notification</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Patient discharged successfully\r\n                        </DialogContentText>\r\n\r\n                            <DialogActions>\r\n                                <Button onClick={redirect} color=\"primary\">\r\n                                    Close\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                </div>\r\n            }\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default ViewPatientProfile","/*!\r\n\r\n =========================================================\r\n * Material Dashboard React - v1.9.0 based on Material Dashboard - v1.2.0\r\n =========================================================\r\n\r\n * Product Page: http://www.creative-tim.com/product/material-dashboard-react\r\n * Copyright 2020 Creative Tim (http://www.creative-tim.com)\r\n * Licensed under MIT (https://github.com/creativetimofficial/material-dashboard-react/blob/master/LICENSE.md)\r\n\r\n =========================================================\r\n\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n */\r\n\r\n// ##############################\r\n// // // Function that converts from hex color to rgb color\r\n// // // Example: input = #9c27b0 => output = 156, 39, 176\r\n// // // Example: input = 9c27b0 => output = 156, 39, 176\r\n// // // Example: input = #999 => output = 153, 153, 153\r\n// // // Example: input = 999 => output = 153, 153, 153\r\n// #############################\r\nconst hexToRgb = input => {\r\n  input = input + \"\";\r\n  input = input.replace(\"#\", \"\");\r\n  let hexRegex = /[0-9A-Fa-f]/g;\r\n  if (!hexRegex.test(input) || (input.length !== 3 && input.length !== 6)) {\r\n    throw new Error(\"input is not a valid hex color.\");\r\n  }\r\n  if (input.length === 3) {\r\n    let first = input[0];\r\n    let second = input[1];\r\n    let last = input[2];\r\n    input = first + first + second + second + last + last;\r\n  }\r\n  input = input.toUpperCase();\r\n  let first = input[0] + input[1];\r\n  let second = input[2] + input[3];\r\n  let last = input[4] + input[5];\r\n  return (\r\n    parseInt(first, 16) +\r\n    \", \" +\r\n    parseInt(second, 16) +\r\n    \", \" +\r\n    parseInt(last, 16)\r\n  );\r\n};\r\n\r\n// ##############################\r\n// // // Variables - Styles that are used on more than one component\r\n// #############################\r\n\r\nconst drawerWidth = 260;\r\n\r\nconst transition = {\r\n  transition: \"all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)\"\r\n};\r\n\r\nconst container = {\r\n  paddingRight: \"15px\",\r\n  paddingLeft: \"15px\",\r\n  marginRight: \"auto\",\r\n  marginLeft: \"auto\"\r\n};\r\n\r\nconst defaultFont = {\r\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n  fontWeight: \"300\",\r\n  lineHeight: \"1.5em\"\r\n};\r\n\r\nconst primaryColor = [\"#9c27b0\", \"#ab47bc\", \"#8e24aa\", \"#af2cc5\"];\r\nconst warningColor = [\"#ff9800\", \"#ffa726\", \"#fb8c00\", \"#ffa21a\"];\r\nconst dangerColor = [\"#f44336\", \"#ef5350\", \"#e53935\", \"#f55a4e\"];\r\nconst successColor = [\"#4caf50\", \"#66bb6a\", \"#43a047\", \"#5cb860\"];\r\nconst infoColor = [\"#00acc1\", \"#26c6da\", \"#00acc1\", \"#00d3ee\"];\r\nconst roseColor = [\"#e91e63\", \"#ec407a\", \"#d81b60\", \"#eb3573\"];\r\nconst grayColor = [\r\n  \"#999\",\r\n  \"#777\",\r\n  \"#3C4858\",\r\n  \"#AAAAAA\",\r\n  \"#D2D2D2\",\r\n  \"#DDD\",\r\n  \"#b4b4b4\",\r\n  \"#555555\",\r\n  \"#333\",\r\n  \"#a9afbb\",\r\n  \"#eee\",\r\n  \"#e7e7e7\"\r\n];\r\nconst blackColor = \"#000\";\r\nconst whiteColor = \"#FFF\";\r\n\r\nconst boxShadow = {\r\n  boxShadow:\r\n    \"0 10px 30px -12px rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \", 0.42), 0 4px 25px 0px rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \", 0.12), 0 8px 10px -5px rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \", 0.2)\"\r\n};\r\n\r\nconst primaryBoxShadow = {\r\n  boxShadow:\r\n    \"0 4px 20px 0 rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \",.14), 0 7px 10px -5px rgba(\" +\r\n    hexToRgb(primaryColor[0]) +\r\n    \",.4)\"\r\n};\r\nconst infoBoxShadow = {\r\n  boxShadow:\r\n    \"0 4px 20px 0 rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \",.14), 0 7px 10px -5px rgba(\" +\r\n    hexToRgb(infoColor[0]) +\r\n    \",.4)\"\r\n};\r\nconst successBoxShadow = {\r\n  boxShadow:\r\n    \"0 4px 20px 0 rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \",.14), 0 7px 10px -5px rgba(\" +\r\n    hexToRgb(successColor[0]) +\r\n    \",.4)\"\r\n};\r\nconst warningBoxShadow = {\r\n  boxShadow:\r\n    \"0 4px 20px 0 rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \",.14), 0 7px 10px -5px rgba(\" +\r\n    hexToRgb(warningColor[0]) +\r\n    \",.4)\"\r\n};\r\nconst dangerBoxShadow = {\r\n  boxShadow:\r\n    \"0 4px 20px 0 rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \",.14), 0 7px 10px -5px rgba(\" +\r\n    hexToRgb(dangerColor[0]) +\r\n    \",.4)\"\r\n};\r\nconst roseBoxShadow = {\r\n  boxShadow:\r\n    \"0 4px 20px 0 rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \",.14), 0 7px 10px -5px rgba(\" +\r\n    hexToRgb(roseColor[0]) +\r\n    \",.4)\"\r\n};\r\n\r\nconst warningCardHeader = {\r\n  background:\r\n    \"linear-gradient(60deg, \" + warningColor[1] + \", \" + warningColor[2] + \")\",\r\n  ...warningBoxShadow\r\n};\r\nconst successCardHeader = {\r\n  background:\r\n    \"linear-gradient(60deg, \" + successColor[1] + \", \" + successColor[2] + \")\",\r\n  ...successBoxShadow\r\n};\r\nconst dangerCardHeader = {\r\n  background:\r\n    \"linear-gradient(60deg, \" + dangerColor[1] + \", \" + dangerColor[2] + \")\",\r\n  ...dangerBoxShadow\r\n};\r\nconst infoCardHeader = {\r\n  background:\r\n    \"linear-gradient(60deg, \" + infoColor[1] + \", \" + infoColor[2] + \")\",\r\n  ...infoBoxShadow\r\n};\r\nconst primaryCardHeader = {\r\n  background:\r\n    \"linear-gradient(60deg, \" + primaryColor[1] + \", \" + primaryColor[2] + \")\",\r\n  ...primaryBoxShadow\r\n};\r\nconst roseCardHeader = {\r\n  background:\r\n    \"linear-gradient(60deg, \" + roseColor[1] + \", \" + roseColor[2] + \")\",\r\n  ...roseBoxShadow\r\n};\r\n\r\nconst cardActions = {\r\n  margin: \"0 20px 10px\",\r\n  paddingTop: \"10px\",\r\n  borderTop: \"1px solid \" + grayColor[10],\r\n  height: \"auto\",\r\n  ...defaultFont\r\n};\r\n\r\nconst cardHeader = {\r\n  margin: \"-20px 15px 0\",\r\n  borderRadius: \"3px\",\r\n  padding: \"15px\"\r\n};\r\n\r\nconst card = {\r\n  display: \"inline-block\",\r\n  position: \"relative\",\r\n  width: \"100%\",\r\n  margin: \"25px 0\",\r\n  boxShadow: \"0 1px 4px 0 rgba(\" + hexToRgb(blackColor) + \", 0.14)\",\r\n  borderRadius: \"3px\",\r\n  color: \"rgba(\" + hexToRgb(blackColor) + \", 0.87)\",\r\n  background: whiteColor\r\n};\r\n\r\nconst defaultBoxShadow = {\r\n  border: \"0\",\r\n  borderRadius: \"3px\",\r\n  boxShadow:\r\n    \"0 10px 20px -12px rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \", 0.42), 0 3px 20px 0px rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \", 0.12), 0 8px 10px -5px rgba(\" +\r\n    hexToRgb(blackColor) +\r\n    \", 0.2)\",\r\n  padding: \"10px 0\",\r\n  transition: \"all 150ms ease 0s\"\r\n};\r\n\r\nconst title = {\r\n  color: grayColor[2],\r\n  textDecoration: \"none\",\r\n  fontWeight: \"300\",\r\n  marginTop: \"30px\",\r\n  marginBottom: \"25px\",\r\n  minHeight: \"32px\",\r\n  fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\r\n  \"& small\": {\r\n    color: grayColor[1],\r\n    fontWeight: \"400\",\r\n    lineHeight: \"1\"\r\n  }\r\n};\r\n\r\nconst cardTitle = {\r\n  ...title,\r\n  marginTop: \"0\",\r\n  marginBottom: \"3px\",\r\n  minHeight: \"auto\",\r\n  \"& a\": {\r\n    ...title,\r\n    marginTop: \".625rem\",\r\n    marginBottom: \"0.75rem\",\r\n    minHeight: \"auto\"\r\n  }\r\n};\r\n\r\nconst cardSubtitle = {\r\n  marginTop: \"-.375rem\"\r\n};\r\n\r\nconst cardLink = {\r\n  \"& + $cardLink\": {\r\n    marginLeft: \"1.25rem\"\r\n  }\r\n};\r\n\r\nexport {\r\n  hexToRgb,\r\n  //variables\r\n  drawerWidth,\r\n  transition,\r\n  container,\r\n  boxShadow,\r\n  card,\r\n  defaultFont,\r\n  primaryColor,\r\n  warningColor,\r\n  dangerColor,\r\n  successColor,\r\n  infoColor,\r\n  roseColor,\r\n  grayColor,\r\n  blackColor,\r\n  whiteColor,\r\n  primaryBoxShadow,\r\n  infoBoxShadow,\r\n  successBoxShadow,\r\n  warningBoxShadow,\r\n  dangerBoxShadow,\r\n  roseBoxShadow,\r\n  warningCardHeader,\r\n  successCardHeader,\r\n  dangerCardHeader,\r\n  infoCardHeader,\r\n  primaryCardHeader,\r\n  roseCardHeader,\r\n  cardActions,\r\n  cardHeader,\r\n  defaultBoxShadow,\r\n  title,\r\n  cardTitle,\r\n  cardSubtitle,\r\n  cardLink\r\n};\r\n","import {\r\n  blackColor,\r\n  whiteColor,\r\n  hexToRgb\r\n} from \"../../../jss/material-dashboard-react.js\";\r\n\r\nconst cardStyle = {\r\n  card: {\r\n    border: \"0\",\r\n    marginBottom: \"30px\",\r\n    marginTop: \"30px\",\r\n    borderRadius: \"6px\",\r\n    color: \"rgba(\" + hexToRgb(blackColor) + \", 0.87)\",\r\n    background: whiteColor,\r\n    width: \"100%\",\r\n    boxShadow: \"0 1px 4px 0 rgba(\" + hexToRgb(blackColor) + \", 0.14)\",\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    minWidth: \"0\",\r\n    wordWrap: \"break-word\",\r\n    fontSize: \".875rem\"\r\n  },\r\n  cardPlain: {\r\n    background: \"transparent\",\r\n    boxShadow: \"none\"\r\n  },\r\n  cardProfile: {\r\n    marginTop: \"30px\",\r\n    textAlign: \"center\"\r\n  },\r\n  cardChart: {\r\n    \"& p\": {\r\n      marginTop: \"0px\",\r\n      paddingTop: \"0px\"\r\n    }\r\n  }\r\n};\r\n\r\nexport default cardStyle;\r\n","import React from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// nodejs library to set properties for components\r\nimport PropTypes from \"prop-types\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// @material-ui/icons\r\n\r\n// core components\r\n\r\n// import styles from \"assets/jss/material-dashboard-react/components/cardStyle.js\";\r\n\r\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardStyle.js\"\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function Card(props) {\r\n  const classes = useStyles();\r\n  const { className, children, plain, profile, chart, ...rest } = props;\r\n  const cardClasses = classNames({\r\n    [classes.card]: true,\r\n    [classes.cardPlain]: plain,\r\n    [classes.cardProfile]: profile,\r\n    [classes.cardChart]: chart,\r\n    [className]: className !== undefined\r\n  });\r\n  return (\r\n    <div className={cardClasses} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  className: PropTypes.string,\r\n  plain: PropTypes.bool,\r\n  profile: PropTypes.bool,\r\n  chart: PropTypes.bool,\r\n  children: PropTypes.node\r\n};\r\n","import { hexToRgb, blackColor } from \"../../../jss/material-dashboard-react.js\";\r\n\r\nconst cardAvatarStyle = {\r\n  cardAvatar: {\r\n    \"&$cardAvatarProfile img\": {\r\n      width: \"100%\",\r\n      height: \"auto\"\r\n    }\r\n  },\r\n  cardAvatarProfile: {\r\n    maxWidth: \"130px\",\r\n    maxHeight: \"130px\",\r\n    margin: \"-50px auto 0\",\r\n    borderRadius: \"50%\",\r\n    overflow: \"hidden\",\r\n    padding: \"0\",\r\n    boxShadow:\r\n      \"0 16px 38px -12px rgba(\" +\r\n      hexToRgb(blackColor) +\r\n      \", 0.56), 0 4px 25px 0px rgba(\" +\r\n      hexToRgb(blackColor) +\r\n      \", 0.12), 0 8px 10px -5px rgba(\" +\r\n      hexToRgb(blackColor) +\r\n      \", 0.2)\",\r\n    \"&$cardAvatarPlain\": {\r\n      marginTop: \"0\"\r\n    }\r\n  },\r\n  cardAvatarPlain: {}\r\n};\r\n\r\nexport default cardAvatarStyle;\r\n","import React from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// nodejs library to set properties for components\r\nimport PropTypes from \"prop-types\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// @material-ui/icons\r\n// core components\r\n\r\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardAvatarStyle\"\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function CardAvatar(props) {\r\n  const classes = useStyles();\r\n  const { children, className, plain, profile, ...rest } = props;\r\n  const cardAvatarClasses = classNames({\r\n    [classes.cardAvatar]: true,\r\n    [classes.cardAvatarProfile]: profile,\r\n    [classes.cardAvatarPlain]: plain,\r\n    [className]: className !== undefined\r\n  });\r\n  return (\r\n    <div className={cardAvatarClasses} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nCardAvatar.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  className: PropTypes.string,\r\n  profile: PropTypes.bool,\r\n  plain: PropTypes.bool\r\n};\r\n","import {\r\n  warningCardHeader,\r\n  successCardHeader,\r\n  dangerCardHeader,\r\n  infoCardHeader,\r\n  primaryCardHeader,\r\n  roseCardHeader,\r\n  whiteColor\r\n} from \"../../../jss/material-dashboard-react.js\";\r\n\r\nconst cardHeaderStyle = {\r\n  cardHeader: {\r\n    padding: \"0.75rem 1.25rem\",\r\n    marginBottom: \"0\",\r\n    borderBottom: \"none\",\r\n    background: \"transparent\",\r\n    zIndex: \"3 !important\",\r\n    \"&$cardHeaderPlain,&$cardHeaderIcon,&$cardHeaderStats,&$warningCardHeader,&$successCardHeader,&$dangerCardHeader,&$infoCardHeader,&$primaryCardHeader,&$roseCardHeader\": {\r\n      margin: \"0 15px\",\r\n      padding: \"0\",\r\n      position: \"relative\",\r\n      color: whiteColor\r\n    },\r\n    \"&:first-child\": {\r\n      borderRadius: \"calc(.25rem - 1px) calc(.25rem - 1px) 0 0\"\r\n    },\r\n    \"&$warningCardHeader,&$successCardHeader,&$dangerCardHeader,&$infoCardHeader,&$primaryCardHeader,&$roseCardHeader\": {\r\n      \"&:not($cardHeaderIcon)\": {\r\n        borderRadius: \"3px\",\r\n        marginTop: \"-20px\",\r\n        padding: \"15px\"\r\n      }\r\n    },\r\n    \"&$cardHeaderStats svg\": {\r\n      fontSize: \"36px\",\r\n      lineHeight: \"56px\",\r\n      textAlign: \"center\",\r\n      width: \"36px\",\r\n      height: \"36px\",\r\n      margin: \"10px 10px 4px\"\r\n    },\r\n    \"&$cardHeaderStats i,&$cardHeaderStats .material-icons\": {\r\n      fontSize: \"36px\",\r\n      lineHeight: \"56px\",\r\n      width: \"56px\",\r\n      height: \"56px\",\r\n      textAlign: \"center\",\r\n      overflow: \"unset\",\r\n      marginBottom: \"1px\"\r\n    },\r\n    \"&$cardHeaderStats$cardHeaderIcon\": {\r\n      textAlign: \"right\"\r\n    }\r\n  },\r\n  cardHeaderPlain: {\r\n    marginLeft: \"0px !important\",\r\n    marginRight: \"0px !important\"\r\n  },\r\n  cardHeaderStats: {\r\n    \"& $cardHeaderIcon\": {\r\n      textAlign: \"right\"\r\n    },\r\n    \"& h1,& h2,& h3,& h4,& h5,& h6\": {\r\n      margin: \"0 !important\"\r\n    }\r\n  },\r\n  cardHeaderIcon: {\r\n    \"&$warningCardHeader,&$successCardHeader,&$dangerCardHeader,&$infoCardHeader,&$primaryCardHeader,&$roseCardHeader\": {\r\n      background: \"transparent\",\r\n      boxShadow: \"none\"\r\n    },\r\n    \"& i,& .material-icons\": {\r\n      width: \"33px\",\r\n      height: \"33px\",\r\n      textAlign: \"center\",\r\n      lineHeight: \"33px\"\r\n    },\r\n    \"& svg\": {\r\n      width: \"24px\",\r\n      height: \"24px\",\r\n      textAlign: \"center\",\r\n      lineHeight: \"33px\",\r\n      margin: \"5px 4px 0px\"\r\n    }\r\n  },\r\n  warningCardHeader: {\r\n    color: whiteColor,\r\n    \"&:not($cardHeaderIcon)\": {\r\n      ...warningCardHeader\r\n    }\r\n  },\r\n  successCardHeader: {\r\n    color: whiteColor,\r\n    \"&:not($cardHeaderIcon)\": {\r\n      ...successCardHeader\r\n    }\r\n  },\r\n  dangerCardHeader: {\r\n    color: whiteColor,\r\n    \"&:not($cardHeaderIcon)\": {\r\n      ...dangerCardHeader\r\n    }\r\n  },\r\n  infoCardHeader: {\r\n    color: whiteColor,\r\n    \"&:not($cardHeaderIcon)\": {\r\n      ...infoCardHeader\r\n    }\r\n  },\r\n  primaryCardHeader: {\r\n    color: whiteColor,\r\n    \"&:not($cardHeaderIcon)\": {\r\n      ...primaryCardHeader\r\n    }\r\n  },\r\n  roseCardHeader: {\r\n    color: whiteColor,\r\n    \"&:not($cardHeaderIcon)\": {\r\n      ...roseCardHeader\r\n    }\r\n  }\r\n};\r\n\r\nexport default cardHeaderStyle;\r\n","import React from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// nodejs library to set properties for components\r\nimport PropTypes from \"prop-types\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// @material-ui/icons\r\n\r\n// core components\r\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardHeaderStyle\"\r\n\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function CardHeader(props) {\r\n  const classes = useStyles();\r\n  const { className, children, color, plain, stats, icon, ...rest } = props;\r\n  const cardHeaderClasses = classNames({\r\n    [classes.cardHeader]: true,\r\n    [classes[color + \"CardHeader\"]]: color,\r\n    [classes.cardHeaderPlain]: plain,\r\n    [classes.cardHeaderStats]: stats,\r\n    [classes.cardHeaderIcon]: icon,\r\n    [className]: className !== undefined\r\n  });\r\n  return (\r\n    <div className={cardHeaderClasses} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nCardHeader.propTypes = {\r\n  className: PropTypes.string,\r\n  color: PropTypes.oneOf([\r\n    \"warning\",\r\n    \"success\",\r\n    \"danger\",\r\n    \"info\",\r\n    \"primary\",\r\n    \"rose\"\r\n  ]),\r\n  plain: PropTypes.bool,\r\n  stats: PropTypes.bool,\r\n  icon: PropTypes.bool,\r\n  children: PropTypes.node\r\n};\r\n","const cardBodyStyle = {\r\n  cardBody: {\r\n    padding: \"0.9375rem 20px\",\r\n    flex: \"1 1 auto\",\r\n    WebkitBoxFlex: \"1\",\r\n    position: \"relative\"\r\n  },\r\n  cardBodyPlain: {\r\n    paddingLeft: \"5px\",\r\n    paddingRight: \"5px\"\r\n  },\r\n  cardBodyProfile: {\r\n    marginTop: \"15px\"\r\n  }\r\n};\r\n\r\nexport default cardBodyStyle;\r\n","import React from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// nodejs library to set properties for components\r\nimport PropTypes from \"prop-types\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// @material-ui/icons\r\n\r\n// core components\r\nimport styles from \"../../assets/jss/material-dashboard-react/components/cardBodyStyle\"\r\n\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function CardBody(props) {\r\n  const classes = useStyles();\r\n  const { className, children, plain, profile, ...rest } = props;\r\n  const cardBodyClasses = classNames({\r\n    [classes.cardBody]: true,\r\n    [classes.cardBodyPlain]: plain,\r\n    [classes.cardBodyProfile]: profile,\r\n    [className]: className !== undefined\r\n  });\r\n  return (\r\n    <div className={cardBodyClasses} {...rest}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nCardBody.propTypes = {\r\n  className: PropTypes.string,\r\n  plain: PropTypes.bool,\r\n  profile: PropTypes.bool,\r\n  children: PropTypes.node\r\n};\r\n","import React from 'react'\r\nimport { Typography, makeStyles, ThemeProvider, Slide } from \"@material-ui/core\"\r\nimport Card from '../../components/Card/Card'\r\nimport CardAvatar from '../../components/Card/CardAvatar'\r\nimport CardHeader from '../../components/Card/CardHeader'\r\nimport CardBody from '../../components/Card/CardBody'\r\nimport Divider from \"@material-ui/core/Divider/Divider\"\r\nimport PhoneIcon from '@material-ui/icons/Phone'\r\nimport Header from \"../../components/Header/Header\"\r\nimport BusinessIcon from '@material-ui/icons/Business'\r\nimport EmailIcon from '@material-ui/icons/Email'\r\nimport theme from \"../../assets/theme/theme\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    headerText: {\r\n        marginBottom: \"75px\"\r\n    },\r\n    card: {\r\n        padding: theme.spacing(3),\r\n    },\r\n    content: {\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst YourProfile = () => {\r\n    const classes = useStyles();\r\n    var seedInfo = localStorage.getItem('seedInfo')\r\n    seedInfo = JSON.parse(seedInfo)\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Header />\r\n            <div className={classes.content}>\r\n                <Slide direction=\"down\" in={true} timeout={300}>\r\n                    <Typography variant=\"h2\" align=\"center\" color=\"secondary\" className={classes.headerText}>Your Profile</Typography>\r\n                </Slide>\r\n                <Slide direction=\"left\" in={true} timeout={300}>\r\n                    <main>\r\n                        <Card profile>\r\n                            <CardAvatar profile>\r\n                                <img\r\n                                    src=\"https://www.publicdomainpictures.net/pictures/210000/velka/doctor-1490804718D0I.jpg\"\r\n                                    alt=\"Avatar\" />\r\n                            </CardAvatar>\r\n                            <CardHeader >\r\n                                <Typography variant=\"h4\">\r\n                                    {seedInfo?.Profile.name}\r\n                                </Typography>\r\n                            </CardHeader>\r\n                            <Divider />\r\n                            <CardBody profile>\r\n                                <Typography>\r\n                                    {seedInfo?.Profile.specialization}\r\n                                </Typography>\r\n                                <div className={classes.card}>\r\n                                    <PhoneIcon fontSize=\"large\" />\r\n                                    <Typography variant=\"h6\">{seedInfo?.Profile.contact}</Typography>\r\n                                    <BusinessIcon fontSize=\"large\" />\r\n                                    <Typography variant=\"h6\">{seedInfo?.Profile.address}</Typography>\r\n                                    <EmailIcon fontSize=\"large\" />\r\n                                    <Typography variant=\"h6\">{seedInfo?.Profile.email}</Typography>\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </main>\r\n                </Slide>\r\n            </div>\r\n        </ThemeProvider>\r\n    )\r\n}\r\nexport default YourProfile","import React from \"react\"\r\nimport { Typography, makeStyles, Grid, ThemeProvider, Slide } from \"@material-ui/core\"\r\nimport ChartistGraph from \"react-chartist\"\r\nimport Card from \"../../components/Card/Card\"\r\nimport CardBody from \"../../components/Card/CardBody\"\r\nimport CardHeader from \"../../components/Card/CardHeader\"\r\nimport Header from \"../../components/Header/Header\"\r\nimport theme from \"../../assets/theme/theme\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    content: {\r\n        padding: theme.spacing(3),\r\n    },\r\n    headerText: {\r\n        color: '#9e9e9e'\r\n    },\r\n    labels: {\r\n        padding: theme.spacing(3)\r\n    },\r\n}));\r\n\r\nconst LiveReadings = () => {\r\n\r\n    var biPolarBarChartData = {\r\n        labels: ['W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10'],\r\n        series: [\r\n            [1, 2, 4, 8, 6, -2, -1, -4, -6, -2]\r\n        ]\r\n    };\r\n    var biPolarBarChartOptions = {\r\n        high: 10,\r\n        low: -10,\r\n        axisX: {\r\n            labelInterpolationFnc: function (value, index) {\r\n                return index % 2 === 0 ? value : null;\r\n            }\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Header />\r\n            <div className={classes.content}>\r\n                <Slide direction=\"down\" in={true} timeout={300}>\r\n                    <Typography variant=\"h2\" color=\"secondary\" align=\"center\">Live Readings</Typography>\r\n                </Slide>\r\n\r\n                <Slide direction=\"down\" in={true} timeout={300}>\r\n                    <Grid container xs={12}>\r\n                        <Grid container className={classes.labels}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h4\" className={classes.headerText}>\r\n                                    Patient's Name:\r\n                    </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                                <Typography variant=\"h4\">\r\n                                    Wahaj Mustakeem\r\n                    </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container className={classes.labels}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h4\" className={classes.headerText}>\r\n                                    Patient's Age:\r\n                    </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                                <Typography variant=\"h4\">\r\n                                    69\r\n                    </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Slide>\r\n                \r\n                \r\n                <Card>\r\n                    <CardHeader><p>ECG</p></CardHeader>\r\n                    <CardBody>\r\n                        <ChartistGraph\r\n                            data={biPolarBarChartData}\r\n                            options={biPolarBarChartOptions}\r\n                            type={'Line'}\r\n                        />\r\n                    </CardBody>\r\n                </Card>\r\n\r\n                <Card>\r\n                    <CardHeader><p>BPM</p></CardHeader>\r\n                    <CardBody>\r\n                        <ChartistGraph data={biPolarBarChartData} options={biPolarBarChartOptions} type={'Line'} />\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default LiveReadings","import React from 'react';\r\nimport { Button, TextField, Dialog, DialogContent, DialogContentText, DialogTitle, DialogActions, Slide, CircularProgress } from '@material-ui/core';\r\nimport { Grid, Typography, makeStyles, Container, MenuItem, ThemeProvider, withStyles } from '@material-ui/core';\r\n// import { InputBase } from \"@material-ui/core\"\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport Header from '../../components/Header/Header';\r\nimport theme from \"../../assets/theme/theme\"\r\nimport QRCode from \"qrcode.react\"\r\nimport moment from \"moment\";\r\nimport * as Yup from 'yup';\r\nimport { Formik, Form } from 'formik';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    content: {\r\n        padding: theme.spacing(3),\r\n    },\r\n    qr: { justifyContent: \"center\", display: \"flex\" },\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    toolBar: {\r\n        minHeight: \"180px\",\r\n    },\r\n    appBar: {\r\n        alignItems: \"center\",\r\n        background: '#00a152'\r\n    },\r\n    marginTopAppBar: {\r\n        marginTop: theme.spacing(35)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(6, 0, 2),\r\n        height: \"70px\"\r\n    },\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        '& label': {\r\n            color: 'white',\r\n        },\r\n        '& label.Mui-focused': {\r\n            color: 'cyan',\r\n        },\r\n\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'cyan',\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'white',\r\n            },\r\n            '& ': {\r\n                color: 'white'\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'cyan',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'cyan',\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nconst AddPatientSchema = Yup.object().shape({\r\n    Name: Yup.string()\r\n        .matches(/^[A-Za-z ]+$/, 'No special characters or numbers allowed')\r\n        .min(2, 'Too Short!')\r\n        .max(20, 'Too Long!')\r\n        .required('Required'),\r\n    Age: Yup.number()\r\n        .positive(\"Age is invalid\")\r\n        .max(150, 'Too Long!')\r\n        .required('Required'),\r\n    Gender: Yup.string().required(\"Please specify your gender\"),\r\n    Address: Yup.string().required(\"Please state your address\"),\r\n    Contact: Yup.string()\r\n        .required(\"Please state your contact number\")\r\n        .test('len', 'Invalid contact detail', val => val && val.toString().length === 10),\r\n});\r\n\r\n// const CssSelect = withStyles({\r\n//     input: {\r\n//         border: '1px solid #FFFFFF',\r\n//         color: 'white',\r\n//         height: 'auto',\r\n\r\n//         '& ': {\r\n//             color: '#FFFFFF'\r\n//         },\r\n//         '&:focus': {\r\n//             borderColor: '#FFFFFF'\r\n//         },\r\n//     },\r\n// })(InputBase);\r\n\r\nexport default function AddPatient() {\r\n    //{$seed}&{address}\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [date, SetDate] = React.useState(moment().format(\"DD-MM-YYYY\"));\r\n    const [DeviceAddress, SetDeviceAddress] = React.useState('');\r\n    const seed = (localStorage.getItem('seed') || '')\r\n    const onDateChange = (date, value) => {\r\n        SetDate(value);\r\n    };\r\n\r\n    // const handleSubmit = async () => {\r\n    //     setVisible(true)\r\n    //     var profile = {\r\n    //         name: name,\r\n    //         age: age,\r\n    //         gender: gender,\r\n    //         address: address,\r\n    //         contact: contact,\r\n    //         date: date\r\n    //     }\r\n\r\n    //     await fetch('https://thetamiddleware.herokuapp.com/addAddress/', {\r\n    //         method: 'POST',\r\n    //         headers: {\r\n    //             'Content-Type': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify({\r\n    //             seed: seed,\r\n    //             deviceNum: 6,\r\n    //             secLevel: 3,\r\n    //             id: \"IDalph6\",\r\n    //             password: \"PASSWORD\",\r\n    //             info: profile\r\n    //         }\r\n    //         )\r\n    //     }).then((result) => result.json()\r\n    //         .then((resp) => {\r\n    //             if (resp[0] === true) {\r\n    //                 SetDeviceAddress(resp[1])\r\n    //                 setOpen(true)\r\n    //             }\r\n    //             else {\r\n    //                 alert(\"Issue occured while adding patient. Contact administrator\")\r\n    //                 window.location.reload(false);\r\n    //             }\r\n    //         }))\r\n\r\n    //     console.log(\"Done\")\r\n    // }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Header />\r\n            <div className={classes.content}>\r\n                <Slide direction=\"down\" in={true} timeout={300}>\r\n                    <Typography variant=\"h2\" align=\"center\" color=\"secondary\">Add Patient</Typography>\r\n                </Slide>\r\n\r\n                <Slide direction=\"down\" in={true} timeout={300}>\r\n                    <Container component=\"main\" maxWidth=\"sm\">\r\n                        <div className={classes.paper}>\r\n                            <Formik\r\n                                initialValues={{\r\n                                    Name: '',\r\n                                    Age: '',\r\n                                    Gender: '',\r\n                                    Address: '',\r\n                                    Contact: '',\r\n                                }}\r\n                                validationSchema={AddPatientSchema}\r\n\r\n                                onSubmit={async (values, actions) => {\r\n                                    var profile = {\r\n                                        name: values.Name,\r\n                                        age: values.Age,\r\n                                        gender: values.Gender,\r\n                                        address: values.Address,\r\n                                        contact: values.Contact,\r\n                                        date: date\r\n                                    }\r\n\r\n                                    await fetch('https://thetamiddleware.herokuapp.com/addAddress/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json'\r\n                                        },\r\n                                        body: JSON.stringify({\r\n                                            seed: seed,\r\n                                            deviceNum: 6,\r\n                                            secLevel: 3,\r\n                                            id: \"IDalph6\",\r\n                                            password: \"PASSWORD\",\r\n                                            info: profile\r\n                                        }\r\n                                        )\r\n                                    }).then((result) => result.json()\r\n                                        .then((resp) => {\r\n                                            if (resp[0] === true) {\r\n                                                SetDeviceAddress(resp[1])\r\n                                                setOpen(true)\r\n                                            }\r\n                                            else {\r\n                                                alert(\"Issue occured while adding patient. Contact administrator\")\r\n                                                window.location.reload(false);\r\n                                            }\r\n                                        }))\r\n\r\n                                    actions.setSubmitting(false)\r\n                                    actions.handleReset()\r\n                                    console.log(\"Done\")\r\n                                }}\r\n                            >\r\n                                {({ errors, touched, values, handleBlur, handleChange, handleSubmit, isSubmitting, handleReset }) => (\r\n                                    <Form onSubmit={handleSubmit}>\r\n                                        <Grid container spacing={3}>\r\n                                            <Grid item xs={12}>\r\n                                                <CssTextField\r\n                                                    disabled={isSubmitting}\r\n                                                    autoComplete=\"off\"\r\n                                                    variant=\"outlined\"\r\n                                                    fullWidth\r\n                                                    id=\"Name\"\r\n                                                    label=\"Name\"\r\n                                                    value={values.Name}\r\n                                                    onChange={handleChange}\r\n                                                    onBlur={handleBlur}\r\n                                                    helperText={touched.Name ? errors.Name : \"\"}\r\n                                                    error={touched.Name && Boolean(errors.Name)}\r\n                                                   \r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={12} sm={6}>\r\n                                                <CssTextField\r\n                                                    variant=\"outlined\"\r\n                                                    disabled={isSubmitting}\r\n                                                    fullWidth\r\n                                                    type=\"number\"\r\n                                                    id=\"Age\"\r\n                                                    label=\"Age in year(s)\"\r\n                                                    color=\"secondary\"\r\n                                                    value={values.Age}\r\n                                                    onChange={handleChange}\r\n                                                    onBlur={handleBlur}\r\n                                                    helperText={touched.Age ? errors.Age : \"\"}\r\n                                                    error={touched.Age && Boolean(errors.Age)}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={12} sm={6}>\r\n                                                <CssTextField\r\n                                                    select\r\n                                                    fullWidth\r\n                                                    variant=\"outlined\"\r\n                                                    disabled={isSubmitting}\r\n                                                    id=\"Gender\"\r\n                                                    label=\"Gender\"\r\n                                                    color=\"secondary\"\r\n                                                    value={values.Gender}\r\n                                                    onChange={handleChange(\"Gender\")}\r\n                                                    onBlur={handleBlur(\"Gender\")}\r\n                                                    helperText={touched.Gender ? errors.Gender : \"\"}\r\n                                                    error={touched.Gender && Boolean(errors.Gender)}\r\n                                                    autoComplete=\"off\"\r\n                                                >\r\n                                                    <MenuItem value={\"male\"}>Male</MenuItem>\r\n                                                    <MenuItem value={\"female\"}>Female</MenuItem>\r\n                                                </CssTextField>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <CssTextField\r\n                                                    disabled={isSubmitting}\r\n                                                    variant=\"outlined\"\r\n                                                    fullWidth\r\n                                                    id=\"Address\"\r\n                                                    label=\"Address\"\r\n                                                    color=\"secondary\"\r\n                                                    value={values.Address}\r\n                                                    onChange={handleChange}\r\n                                                    onBlur={handleBlur}\r\n                                                    helperText={touched.Address ? errors.Address : \"\"}\r\n                                                    error={touched.Address && Boolean(errors.Address)}\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={12} sm={6}>\r\n                                                <CssTextField\r\n                                                    disabled={isSubmitting}\r\n                                                    variant=\"outlined\"\r\n                                                    fullWidth\r\n                                                    type=\"number\"\r\n                                                    id=\"Contact\"\r\n                                                    label=\"Contact Number\"\r\n                                                    color=\"secondary\"\r\n                                                    value={values.Contact}\r\n                                                    onChange={handleChange}\r\n                                                    onBlur={handleBlur}\r\n                                                    helperText={touched.Contact ? errors.Contact : \"\"}\r\n                                                    error={touched.Contact && Boolean(errors.Contact)}\r\n                                                    autoComplete=\"off\"\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={12} sm={6}>\r\n                                                <MuiPickersUtilsProvider libInstance={moment} utils={DateFnsUtils}>\r\n                                                    <KeyboardDatePicker\r\n                                                        disabled={isSubmitting}\r\n                                                        fullWidth\r\n                                                        maxDate={new Date()}\r\n                                                        id=\"admissionDate\"\r\n                                                        color=\"secondary\"\r\n                                                        inputVariant=\"outlined\"\r\n                                                        autoOk={true}\r\n                                                        format=\"dd-MM-yyyy\"\r\n                                                        label=\"Admission Date\"\r\n                                                        inputValue={date}\r\n                                                        onChange={onDateChange}\r\n                                                    />\r\n                                                </MuiPickersUtilsProvider>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Button\r\n                                            type=\"submit\"\r\n                                            disabled={isSubmitting}\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            style={{ fontSize: 20 }}\r\n                                            color=\"primary\"\r\n                                            className={classes.submit}\r\n                                        >\r\n                                            {isSubmitting ? <CircularProgress color=\"secondary\" /> : 'Add Patient'}\r\n                                        </Button>\r\n                                        <Dialog\r\n                                            maxWidth=\"md\"\r\n                                            open={open}\r\n                                            onClose={() => {\r\n                                                handleReset()\r\n                                                handleClose()\r\n                                            }}\r\n                                        >\r\n                                            <DialogTitle>Patient Added Successfully</DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText>\r\n                                                    Kindly keep the Address ID safe. Your Patient's Address is: {DeviceAddress} and the QR is:\r\n                                                    <div className={classes.qr}>\r\n                                                        <QRCode value={`${seed}&${DeviceAddress}`} />\r\n                                                    </div>\r\n                                                </DialogContentText>\r\n                                                <DialogActions>\r\n                                                    <Button onClick={handleClose} color=\"primary\">\r\n                                                        Save QR\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        onClick={() => {\r\n                                                            handleClose();\r\n                                                            handleReset();\r\n                                                        }\r\n                                                        }\r\n                                                        color=\"primary\">\r\n                                                        Close\r\n                                                    </Button>\r\n                                                </DialogActions>\r\n                                            </DialogContent>\r\n                                        </Dialog>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                        </div>\r\n                    </Container>\r\n                </Slide>\r\n            </div>\r\n        </ThemeProvider >\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport Login from \"./views/Login/Login\"\r\nimport CreateAccount from \"./views/CreateAccount/CreateAccount\"\r\nimport ForgotPassword from './views/ForgotPassword/ForgotPassword';\r\nimport HomePage from './views/HomePage/HomePage';\r\nimport ViewHistory from './views/ViewHistory/ViewHistory'\r\nimport ViewPatientProfile from './views/ViewPatientProfile/ViewPatientProfile.js'\r\nimport YourProfile from './views/YourProfile/YourProfile'\r\nimport LiveReadings from './views/LiveReadings/LiveReadings';\r\nimport AddPatient from './views/AddPatient/AddPatient'\r\nimport './App.css'\r\n\r\n// const authentication = {\r\n//   isLoggedIn: false,\r\n//   onAuthentication() {\r\n//     this.isLoggedIn = true\r\n//   },\r\n//   getLoggedInStatus() {\r\n//     return this.isLoggedIn\r\n//   }\r\n// }\r\n\r\n// function SecuredRoute(props) {\r\n//   return (\r\n//     <Route\r\n//       path={props.path}\r\n//       render={data => loggedInStatus ?\r\n//         (<props.component {...data} />) :\r\n//         (<Redirect to={{ pathname: '/' }} />)\r\n//       } />\r\n//   )\r\n// }\r\nReactDOM.render(\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/\" exact component={Login} />\r\n      <Route path=\"/forgotpassword\" component={ForgotPassword} />\r\n      <Route path=\"/createaccount\" component={CreateAccount} />\r\n      <Route path=\"/dashboard\" component={HomePage} />\r\n      <Route path=\"/viewpatientprofile/:address\" component={ViewPatientProfile} />\r\n      <Route path=\"/yourprofile\" component={YourProfile} />\r\n      <Route path=\"/livereadings\" component={LiveReadings} />\r\n      <Route path=\"/addpatient\" component={AddPatient} />\r\n      <Route path=\"/viewhistory/:name&:age&:address\" component={ViewHistory} />\r\n\r\n      <Route path=\"*\" component={() => \"404 NOT FOUND\"} />\r\n    </Switch>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}