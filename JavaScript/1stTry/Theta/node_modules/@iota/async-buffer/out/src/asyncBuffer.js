"use strict";
exports.__esModule = true;
var Promise = require("bluebird");
exports.asyncBuffer = function (length) {
    if (length === void 0) { length = Number.POSITIVE_INFINITY; }
    if (length !== Number.POSITIVE_INFINITY && !Number.isInteger(length)) {
        throw new TypeError('Illegal buffer length.');
    }
    if (length <= 0) {
        throw new RangeError('Illegal buffer length.');
    }
    // A buffer consists of 2 asynchrounous queues.
    // Writer resolves future values of the outbound queue.
    // Reader resolves past values of the inbound queue.
    // This means that we can start reading values from async buffers before those are written to it.
    var inboundQueue = [];
    var outboundQueue = [];
    var lengthExceeded = "Buffer can not exceed specified length of " + length + " items.";
    return {
        write: function (value) {
            if (outboundQueue.length !== 0) {
                ;
                outboundQueue.shift()(value);
            }
            // A buffer has length indicating how many values can be queued.
            // If buffer is to exceed specified length, an error is thrown.
            else if (inboundQueue.length < length) {
                inboundQueue.push(value);
            }
            else {
                throw new Error(lengthExceeded);
            }
        },
        read: function () {
            if (outboundQueue.length === length) {
                throw new RangeError(lengthExceeded);
            }
            return new Promise(function (resolve) {
                if (inboundQueue.length !== 0) {
                    resolve(inboundQueue.shift());
                }
                else {
                    outboundQueue.push(resolve);
                }
            });
        },
        dump: function () { return inboundQueue.slice(); },
        inboundLength: function () { return inboundQueue.length; },
        outboundLength: function () { return outboundQueue.length; }
    };
};
//# sourceMappingURL=asyncBuffer.js.map