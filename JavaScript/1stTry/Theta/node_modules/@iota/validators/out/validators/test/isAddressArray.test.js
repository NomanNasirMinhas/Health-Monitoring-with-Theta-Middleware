"use strict";
exports.__esModule = true;
var ava_1 = require("ava");
var src_1 = require("../src");
ava_1["default"]('isAddressArray()', function (t) {
    var addresses = ['JALLWDUOSTSJVL9EEHKW9YQFPBVBJAGLNKRVGSQZCGHQWEMIIILJMTHVAGVDXJVZMBAMOZTSBQNRVNLLS'];
    var addressesWithChecksum = [
        'UYEEERFQYTPFAHIPXDQAQYWYMSMCLMGBTYAXLWFRFFWPYFOICOVLK9A9VYNCKK9TQUNBTARCEQXJHD9VYXOEDEOMRC',
    ];
    var addressesOfInvalidLength = ['SDFSDAFdasfaSDF'];
    var addressesOfInvalidTrytes = ['SDFSDAFdasfaSDF'];
    var addressesOfInvalidSecurity = [
        'JALLWDTSJVL9EEHKW9YQFPBVBJAGLNKRVGSQZCGHQWEMIIILJMTHVAGVDXJVZMBAMOZTSBQNRVNLLSJMP',
    ];
    var addressesOfInvalidIndex = [
        'JALLWDTSJVL9EEHKW9YQFPBVBJAGLNKRVGSQZCGHQWEMIIILJMTHVAGVDXJVZMBAMOZTSBQNRVNLLSJMP',
    ];
    t.is(src_1.isAddressArray(addresses), false, 'isAddressArray() should return true for valid address array without checksum.');
    t.is(src_1.isAddressArray(addressesWithChecksum), true, 'isAddressArray() should return true for valid addresses with checksum.');
    t.is(src_1.isAddressArray(addressesOfInvalidLength), false, 'isAddressArray() should return false for addresses of invalid length.');
    t.is(src_1.isAddressArray(addressesOfInvalidTrytes), false, 'isAddressArray() should return false for addresses of invalid trytes.');
    t.is(src_1.isAddressArray(addressesOfInvalidSecurity), false, 'isAddressArray() should return false for addresses of invalid security level.');
    t.is(src_1.isAddressArray(addressesOfInvalidIndex), false, 'isAddressArray() should return false for addresses of invalid index.');
});
//# sourceMappingURL=isAddressArray.test.js.map