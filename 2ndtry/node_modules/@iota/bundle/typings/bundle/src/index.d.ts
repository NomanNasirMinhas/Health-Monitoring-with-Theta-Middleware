/** @module bundle */
import '../../typed-array';
export interface BundleEntry {
    readonly signatureOrMessage: Int8Array;
    readonly address: Int8Array;
    readonly value: Int8Array;
    readonly obsoleteTag: Int8Array;
    readonly issuanceTimestamp: Int8Array;
    readonly tag: Int8Array;
}
/**
 * Creates a bundle with given transaction entries.
 *
 * @method createBundle
 *
 * @param {BundleEntry[]} [entries=[]] - Entries of single or multiple transactions with the same address
 *
 * @return {Int8Array[]} List of transactions in the bundle
 */
export declare const createBundle: (entries?: readonly Partial<BundleEntry>[]) => Int8Array;
/**
 * Adds given transaction entry to a bundle.
 *
 * @method addEntry
 *
 * @param {object} entry - Entry of a single or multiple transactions with the same address.
 * @param {Int8Array} entry.address - Address.
 * @param {Int8Array} entry.value - Value to transfer in iotas.
 * @param {Int8Array} [entry.signatureOrMessage] - Signature or message fragment(s).
 * @param {Int8Array} [entry.timestamp] - Issuance timestamp (in seconds).
 * @param {Int8Array} [entry.tag] - Optional Tag, **Deprecated**.
 * @param {Int8Array} bundle - Bundle buffer.
 *
 * @return {Int8Array} Bundle copy with new entries.
 */
export declare const addEntry: (bundle: Int8Array, entry: Partial<BundleEntry>) => Int8Array;
/**
 * Finalizes a bundle by calculating the bundle hash.
 *
 * @method finalizeBundle
 *
 * @param {Int8Array} bundle - Bundle transaction trits
 *
 * @param {number} [numberOfFragments=3]
 *
 * @return {Int8Array} List of transactions in the finalized bundle
 */
export declare const finalizeBundle: (bundle: Int8Array, numberOfFragments?: number) => Int8Array;
/**
 * Adds signature message fragments to transactions in a bundle starting at offset.
 *
 * @method addSignatureOrMessage
 *
 * @param {Int8Array} bundle - Bundle buffer.
 * @param {Int8Array} signatureOrMessage - Signature or message to add.
 * @param {number} index - Transaction index as entry point for signature or message fragments.
 *
 * @return {Int8Array} List of transactions in the updated bundle
 */
export declare const addSignatureOrMessage: (bundle: Int8Array, signatureOrMessage: Int8Array, index: number) => Int8Array;
/**
 * Sums up transaction values in a bundle starting at offset.
 *
 * @method valueSum
 *
 * @param {Int8Array} bundle - Bundle buffer.
 * @param {number} offset - Offset from the start of the bundle buffer.
 * @param {number} length - Length of transactions in which values should be summed.
 *
 * @return {number} Total value of 'length' transactions in the bundle starting at offset.
 */
export declare const valueSum: (buffer: Int8Array, offset: number, length: number) => number;
